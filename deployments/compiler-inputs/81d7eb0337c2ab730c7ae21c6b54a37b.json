{
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"id": "81d7eb0337c2ab730c7ae21c6b54a37b",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": false,
			"optimizer": {
				"runs": 200,
				"enabled": true
			},
			"metadata": {
				"useLiteralContent": false,
				"bytecodeHash": "ipfs",
				"appendCBOR": true
			},
			"outputSelection": {
				"lib/forge-std/lib/ds-test/src/test.sol": {
					"*": []
				},
				"lib/forge-std/src/Base.sol": {
					"*": []
				},
				"lib/forge-std/src/Script.sol": {
					"*": []
				},
				"lib/forge-std/src/StdAssertions.sol": {
					"*": []
				},
				"lib/forge-std/src/StdChains.sol": {
					"*": []
				},
				"lib/forge-std/src/StdCheats.sol": {
					"*": []
				},
				"lib/forge-std/src/StdError.sol": {
					"*": []
				},
				"lib/forge-std/src/StdInvariant.sol": {
					"*": []
				},
				"lib/forge-std/src/StdJson.sol": {
					"*": []
				},
				"lib/forge-std/src/StdMath.sol": {
					"*": []
				},
				"lib/forge-std/src/StdStorage.sol": {
					"*": []
				},
				"lib/forge-std/src/StdStyle.sol": {
					"*": []
				},
				"lib/forge-std/src/StdUtils.sol": {
					"*": []
				},
				"lib/forge-std/src/Test.sol": {
					"*": []
				},
				"lib/forge-std/src/Vm.sol": {
					"*": []
				},
				"lib/forge-std/src/console.sol": {
					"*": []
				},
				"lib/forge-std/src/console2.sol": {
					"*": []
				},
				"lib/forge-std/src/interfaces/IMulticall3.sol": {
					"*": []
				},
				"lib/forge-std/src/mocks/MockERC20.sol": {
					"*": []
				},
				"lib/forge-std/src/mocks/MockERC721.sol": {
					"*": []
				},
				"lib/forge-std/src/safeconsole.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/script/helpers/CoreDeploymentLib.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBController.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBDirectory.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBERC20.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBFeelessAddresses.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBFundAccessLimits.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBMultiTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBPermissions.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBPrices.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBProjects.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBRulesets.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBSplits.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBTerminalStore.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/JBTokens.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/abstract/JBControlled.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/abstract/JBPermissioned.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/enums/JBApprovalStatus.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBControlled.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBController.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBDirectory.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBDirectoryAccessControl.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBFeelessAddresses.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBFundAccessLimits.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBMigratable.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBPayHook.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBPermissioned.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBPermissions.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBPriceFeed.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBPrices.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBProjectUriRegistry.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBProjects.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBRedeemHook.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBRulesetApprovalHook.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBRulesetDataHook.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBRulesets.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBSplitHook.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBSplits.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBTerminalStore.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBToken.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBTokenUriResolver.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/IJBTokens.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBFeeTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBMultiTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBPayoutTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBPermitTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBRedeemTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/interfaces/terminal/IJBTerminal.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBConstants.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBFees.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBFixedPointNumber.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBMetadataResolver.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBRulesetMetadataResolver.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/libraries/JBSplitGroupIds.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBAccountingContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBAfterPayRecordedContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBAfterRedeemRecordedContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBBeforePayRecordedContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBBeforeRedeemRecordedContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBCurrencyAmount.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBFee.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBFundAccessLimitGroup.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBPayHookSpecification.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBPermissionsData.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRedeemHookSpecification.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRuleset.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRulesetConfig.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRulesetMetadata.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRulesetWeightCache.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBRulesetWithMetadata.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBSingleAllowanceContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBSplit.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBSplitGroup.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBSplitHookContext.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBTerminalConfig.sol": {
					"*": []
				},
				"node_modules/@bananapus/core/src/structs/JBTokenAmount.sol": {
					"*": []
				},
				"node_modules/@bananapus/ownable/src/JBOwnable.sol": {
					"*": []
				},
				"node_modules/@bananapus/ownable/src/JBOwnableOverrides.sol": {
					"*": []
				},
				"node_modules/@bananapus/ownable/src/interfaces/IJBOwnable.sol": {
					"*": []
				},
				"node_modules/@bananapus/ownable/src/struct/JBOwner.sol": {
					"*": []
				},
				"node_modules/@bananapus/permission-ids/src/JBPermissionIds.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/access/Ownable.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/governance/utils/Votes.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/interfaces/IERC5805.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/interfaces/IERC6372.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/metatx/ERC2771Context.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721Votes.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/Address.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/Context.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/Create2.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/Nonces.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/ShortStrings.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/Strings.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/structs/BitMaps.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/structs/Checkpoints.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
					"*": []
				},
				"node_modules/@openzeppelin/contracts/utils/types/Time.sol": {
					"*": []
				},
				"node_modules/@prb/math/src/Common.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/core/SphinxDataTypes.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/core/interfaces/ISphinxModule.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/core/interfaces/ISphinxModuleProxyFactory.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/StdUtils.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/Vm.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/interfaces/IERC165.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/interfaces/IERC20.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/interfaces/IERC721.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/interfaces/IMulticall3.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/mocks/MockERC20.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/forge-std/src/mocks/MockERC721.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/Sphinx.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/SphinxConstants.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/SphinxForkCheck.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/SphinxPlugin.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/SphinxPluginTypes.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/SphinxUtils.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/ICreateCall.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/IEnum.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/IGnosisSafe.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/IGnosisSafeProxy.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/IGnosisSafeProxyFactory.sol": {
					"*": []
				},
				"node_modules/@sphinx-labs/contracts/contracts/foundry/interfaces/IMultiSend.sol": {
					"*": []
				},
				"node_modules/@uniswap/permit2/src/interfaces/IAllowanceTransfer.sol": {
					"*": []
				},
				"node_modules/@uniswap/permit2/src/interfaces/IEIP712.sol": {
					"*": []
				},
				"node_modules/@uniswap/permit2/src/interfaces/IPermit2.sol": {
					"*": []
				},
				"node_modules/@uniswap/permit2/src/interfaces/ISignatureTransfer.sol": {
					"*": []
				},
				"script/Deploy.s.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				},
				"script/helpers/SuckerDeploymentLib.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				},
				"src/BPOptimismSucker.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				},
				"src/BPSucker.sol": {
					"*": []
				},
				"src/BPSuckerHook.sol": {
					"*": []
				},
				"src/BPSuckerRegistry.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				},
				"src/deployers/BPOptimismSuckerDeployer.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				},
				"src/enums/BPAddToBalanceMode.sol": {
					"*": []
				},
				"src/interfaces/IBPSucker.sol": {
					"*": []
				},
				"src/interfaces/IBPSuckerDeployer.sol": {
					"*": []
				},
				"src/interfaces/IBPSuckerDeployerFeeless.sol": {
					"*": []
				},
				"src/interfaces/IBPSuckerRegistry.sol": {
					"*": []
				},
				"src/interfaces/OPMessenger.sol": {
					"*": []
				},
				"src/interfaces/OPStandardBridge.sol": {
					"*": []
				},
				"src/structs/BPClaim.sol": {
					"*": []
				},
				"src/structs/BPInboxTreeRoot.sol": {
					"*": []
				},
				"src/structs/BPLeaf.sol": {
					"*": []
				},
				"src/structs/BPMessageRoot.sol": {
					"*": []
				},
				"src/structs/BPOutboxTree.sol": {
					"*": []
				},
				"src/structs/BPRemoteToken.sol": {
					"*": []
				},
				"src/structs/BPSuckerDeployerConfig.sol": {
					"*": []
				},
				"src/structs/BPTokenMapping.sol": {
					"*": []
				},
				"src/utils/MerkleLib.sol": {
					"*": []
				},
				"test/unit/merkle.t.sol": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				}
			},
			"evmVersion": "paris",
			"libraries": {},
			"remappings": [
				"@sphinx-labs/contracts/=node_modules/@sphinx-labs/contracts/contracts/foundry/",
				"@arbitrum/=node_modules/@arbitrum/",
				"@bananapus/=node_modules/@bananapus/",
				"@chainlink/=node_modules/@chainlink/",
				"@eth-optimism/=node_modules/@eth-optimism/",
				"@gnosis.pm/=node_modules/@gnosis.pm/",
				"@offchainlabs/=node_modules/@offchainlabs/",
				"@openzeppelin/=node_modules/@openzeppelin/",
				"@prb/=node_modules/@prb/",
				"@uniswap/=node_modules/@uniswap/",
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"hardhat/=node_modules/hardhat/",
				"solmate/=node_modules/solmate/",
				"sphinx-forge-std/=node_modules/sphinx-forge-std/",
				"sphinx-solmate/=node_modules/sphinx-solmate/",
				"sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
			]
		},
		"sources": {
			"node_modules/@bananapus/core/src/abstract/JBPermissioned.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {IJBPermissioned} from \"./../interfaces/IJBPermissioned.sol\";\nimport {IJBPermissions} from \"./../interfaces/IJBPermissions.sol\";\n\n/// @notice Modifiers to allow access to transactions based on which permissions the message's sender has.\nabstract contract JBPermissioned is Context, IJBPermissioned {\n    //*********************************************************************//\n    // --------------------------- custom errors -------------------------- //\n    //*********************************************************************//\n    error UNAUTHORIZED();\n\n    //*********************************************************************//\n    // ---------------- public immutable stored properties --------------- //\n    //*********************************************************************//\n\n    /// @notice A contract storing permissions.\n    IJBPermissions public immutable override PERMISSIONS;\n\n    //*********************************************************************//\n    // -------------------------- constructor ---------------------------- //\n    //*********************************************************************//\n\n    /// @param permissions A contract storing permissions.\n    constructor(IJBPermissions permissions) {\n        PERMISSIONS = permissions;\n    }\n\n    //*********************************************************************//\n    // -------------------------- internal views ------------------------- //\n    //*********************************************************************//\n\n    /// @notice Require the message sender to be the account or have the relevant permission.\n    /// @param account The account to allow.\n    /// @param projectId The project ID to check the permission under.\n    /// @param permissionId The required permission ID. The operator must have this permission within the specified\n    /// project ID.\n    function _requirePermissionFrom(address account, uint256 projectId, uint256 permissionId) internal view {\n        address sender = _msgSender();\n        if (\n            sender != account && !PERMISSIONS.hasPermission(sender, account, projectId, permissionId)\n                && !PERMISSIONS.hasPermission(sender, account, 0, permissionId)\n        ) revert UNAUTHORIZED();\n    }\n\n    /// @notice If the 'alsoGrantAccessIf' condition is truthy, proceed. Otherwise, require the message sender to be the\n    /// account or\n    /// have the relevant permission.\n    /// @param account The account to allow.\n    /// @param projectId The project ID to check the permission under.\n    /// @param permissionId The required permission ID. The operator must have this permission within the specified\n    /// project ID.\n    /// @param alsoGrantAccessIf An override condition which will allow access regardless of permissions.\n    function _requirePermissionAllowingOverrideFrom(\n        address account,\n        uint256 projectId,\n        uint256 permissionId,\n        bool alsoGrantAccessIf\n    )\n        internal\n        view\n    {\n        if (alsoGrantAccessIf) return;\n        _requirePermissionFrom(account, projectId, permissionId);\n    }\n}\n"
			},
			"node_modules/@bananapus/core/src/enums/JBApprovalStatus.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice A ruleset's approval status in a ruleset approval hook.\nenum JBApprovalStatus {\n    Empty,\n    Upcoming,\n    Active,\n    ApprovalExpected,\n    Approved,\n    Failed\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBControlled.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBDirectory} from \"./IJBDirectory.sol\";\n\ninterface IJBControlled {\n    function DIRECTORY() external view returns (IJBDirectory);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBController.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBApprovalStatus} from \"./../enums/JBApprovalStatus.sol\";\nimport {JBRuleset} from \"./../structs/JBRuleset.sol\";\nimport {JBRulesetWithMetadata} from \"./../structs/JBRulesetWithMetadata.sol\";\nimport {JBRulesetConfig} from \"./../structs/JBRulesetConfig.sol\";\nimport {JBRulesetMetadata} from \"./../structs/JBRulesetMetadata.sol\";\nimport {JBTerminalConfig} from \"./../structs/JBTerminalConfig.sol\";\nimport {JBSplit} from \"./../structs/JBSplit.sol\";\nimport {JBSplitGroup} from \"./../structs/JBSplitGroup.sol\";\nimport {IJBDirectory} from \"./IJBDirectory.sol\";\nimport {IJBDirectoryAccessControl} from \"./IJBDirectoryAccessControl.sol\";\nimport {IJBFundAccessLimits} from \"./IJBFundAccessLimits.sol\";\nimport {IJBRulesets} from \"./IJBRulesets.sol\";\nimport {IJBMigratable} from \"./IJBMigratable.sol\";\nimport {IJBProjectUriRegistry} from \"./IJBProjectUriRegistry.sol\";\nimport {IJBProjects} from \"./IJBProjects.sol\";\nimport {IJBSplits} from \"./IJBSplits.sol\";\nimport {IJBToken} from \"./IJBToken.sol\";\nimport {IJBTokens} from \"./IJBTokens.sol\";\n\ninterface IJBController is IERC165, IJBProjectUriRegistry, IJBDirectoryAccessControl {\n    event LaunchProject(uint256 rulesetId, uint256 projectId, string metadata, string memo, address caller);\n\n    event LaunchRulesets(uint256 rulesetId, uint256 projectId, string memo, address caller);\n\n    event QueueRulesets(uint256 rulesetId, uint256 projectId, string memo, address caller);\n\n    event SendReservedTokensToSplits(\n        uint256 indexed rulesetId,\n        uint256 indexed rulesetCycleNumber,\n        uint256 indexed projectId,\n        address beneficiary,\n        uint256 tokenCount,\n        uint256 beneficiaryTokenCount,\n        string memo,\n        address caller\n    );\n\n    event SendReservedTokensToSplit(\n        uint256 indexed projectId,\n        uint256 indexed rulesetId,\n        uint256 indexed group,\n        JBSplit split,\n        uint256 tokenCount,\n        address caller\n    );\n\n    event MintTokens(\n        address indexed beneficiary,\n        uint256 indexed projectId,\n        uint256 tokenCount,\n        uint256 beneficiaryTokenCount,\n        string memo,\n        uint256 reservedRate,\n        address caller\n    );\n\n    event BurnTokens(\n        address indexed holder, uint256 indexed projectId, uint256 tokenCount, string memo, address caller\n    );\n\n    event ReservedDistributionReverted(\n        uint256 indexed projectId, JBSplit split, uint256 amount, bytes reason, address caller\n    );\n\n    event MigrateController(uint256 indexed projectId, IJBMigratable to, address caller);\n\n    event PrepMigration(uint256 indexed projectId, address from, address caller);\n\n    event SetMetadata(uint256 indexed projectId, string metadata, address caller);\n\n    function PROJECTS() external view returns (IJBProjects);\n\n    function DIRECTORY() external view returns (IJBDirectory);\n\n    function RULESETS() external view returns (IJBRulesets);\n\n    function TOKENS() external view returns (IJBTokens);\n\n    function SPLITS() external view returns (IJBSplits);\n\n    function FUND_ACCESS_LIMITS() external view returns (IJBFundAccessLimits);\n\n    function pendingReservedTokenBalanceOf(uint256 projectId) external view returns (uint256);\n\n    function totalTokenSupplyWithReservedTokensOf(uint256 projectId) external view returns (uint256);\n\n    function getRulesetOf(\n        uint256 projectId,\n        uint256 rulesetId\n    )\n        external\n        view\n        returns (JBRuleset memory ruleset, JBRulesetMetadata memory metadata);\n\n    function latestQueuedRulesetOf(uint256 projectId)\n        external\n        view\n        returns (JBRuleset memory, JBRulesetMetadata memory metadata, JBApprovalStatus);\n\n    function rulesetsOf(\n        uint256 projectId,\n        uint256 startingId,\n        uint256 size\n    )\n        external\n        view\n        returns (JBRulesetWithMetadata[] memory rulesets);\n\n    function currentRulesetOf(uint256 projectId)\n        external\n        view\n        returns (JBRuleset memory ruleset, JBRulesetMetadata memory metadata);\n\n    function upcomingRulesetOf(uint256 projectId)\n        external\n        view\n        returns (JBRuleset memory ruleset, JBRulesetMetadata memory metadata);\n\n    function launchProjectFor(\n        address owner,\n        string calldata projectUri,\n        JBRulesetConfig[] calldata rulesetConfigurations,\n        JBTerminalConfig[] memory terminalConfigurations,\n        string calldata memo\n    )\n        external\n        returns (uint256 projectId);\n\n    function launchRulesetsFor(\n        uint256 projectId,\n        JBRulesetConfig[] calldata rulesetConfigurations,\n        JBTerminalConfig[] memory terminalConfigurations,\n        string calldata memo\n    )\n        external\n        returns (uint256 rulesetId);\n\n    function queueRulesetsOf(\n        uint256 projectId,\n        JBRulesetConfig[] calldata rulesetConfigurations,\n        string calldata memo\n    )\n        external\n        returns (uint256 rulesetId);\n\n    function mintTokensOf(\n        uint256 projectId,\n        uint256 tokenCount,\n        address beneficiary,\n        string calldata memo,\n        bool useReservedRate\n    )\n        external\n        returns (uint256 beneficiaryTokenCount);\n\n    function burnTokensOf(address holder, uint256 projectId, uint256 tokenCount, string calldata memo) external;\n\n    function sendReservedTokensToSplitsOf(uint256 projectId, string memory memo) external returns (uint256);\n\n    function migrateController(uint256 projectId, IJBMigratable to) external;\n\n    function setSplitGroupsOf(uint256 projectId, uint256 rulesetId, JBSplitGroup[] calldata splitGroups) external;\n\n    function deployERC20For(\n        uint256 projectId,\n        string calldata name,\n        string calldata symbol,\n        bytes32 salt\n    )\n        external\n        returns (IJBToken token);\n\n    function setTokenFor(uint256 _projectId, IJBToken _token) external;\n\n    function claimTokensFor(address holder, uint256 projectId, uint256 amount, address beneficiary) external;\n\n    function transferCreditsFrom(address holder, uint256 projectId, address recipient, uint256 amount) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBDirectory.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IJBTerminal} from \"./terminal/IJBTerminal.sol\";\nimport {IJBProjects} from \"./IJBProjects.sol\";\n\ninterface IJBDirectory {\n    event SetController(uint256 indexed projectId, IERC165 indexed controller, address caller);\n\n    event AddTerminal(uint256 indexed projectId, IJBTerminal indexed terminal, address caller);\n\n    event SetTerminals(uint256 indexed projectId, IJBTerminal[] terminals, address caller);\n\n    event SetPrimaryTerminal(\n        uint256 indexed projectId, address indexed token, IJBTerminal indexed terminal, address caller\n    );\n\n    event SetIsAllowedToSetFirstController(address indexed addr, bool indexed flag, address caller);\n\n    function PROJECTS() external view returns (IJBProjects);\n\n    function controllerOf(uint256 projectId) external view returns (IERC165);\n\n    function isAllowedToSetFirstController(address account) external view returns (bool);\n\n    function terminalsOf(uint256 projectId) external view returns (IJBTerminal[] memory);\n\n    function isTerminalOf(uint256 projectId, IJBTerminal terminal) external view returns (bool);\n\n    function primaryTerminalOf(uint256 projectId, address token) external view returns (IJBTerminal);\n\n    function setControllerOf(uint256 projectId, IERC165 controller) external;\n\n    function setTerminalsOf(uint256 projectId, IJBTerminal[] calldata terminals) external;\n\n    function setPrimaryTerminalOf(uint256 projectId, address token, IJBTerminal terminal) external;\n\n    function setIsAllowedToSetFirstController(address account, bool flag) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBDirectoryAccessControl.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBDirectoryAccessControl {\n    function setTerminalsAllowed(uint256 projectId) external view returns (bool);\n    function setControllerAllowed(uint256 projectId) external view returns (bool);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBFundAccessLimits.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBFundAccessLimitGroup} from \"./../structs/JBFundAccessLimitGroup.sol\";\nimport {JBCurrencyAmount} from \"./../structs/JBCurrencyAmount.sol\";\n\ninterface IJBFundAccessLimits is IERC165 {\n    event SetFundAccessLimits(\n        uint256 indexed rulesetId, uint256 indexed projectId, JBFundAccessLimitGroup limits, address caller\n    );\n\n    function payoutLimitsOf(\n        uint256 projectId,\n        uint256 rulesetId,\n        address terminal,\n        address token\n    )\n        external\n        view\n        returns (JBCurrencyAmount[] memory payoutLimits);\n\n    function payoutLimitOf(\n        uint256 projectId,\n        uint256 rulesetId,\n        address terminal,\n        address token,\n        uint256 currency\n    )\n        external\n        view\n        returns (uint256 payoutLimit);\n\n    function surplusAllowancesOf(\n        uint256 projectId,\n        uint256 rulesetId,\n        address terminal,\n        address token\n    )\n        external\n        view\n        returns (JBCurrencyAmount[] memory surplusAllowances);\n\n    function surplusAllowanceOf(\n        uint256 projectId,\n        uint256 rulesetId,\n        address terminal,\n        address token,\n        uint256 currency\n    )\n        external\n        view\n        returns (uint256 surplusAllowance);\n\n    function setFundAccessLimitsFor(\n        uint256 projectId,\n        uint256 rulesetId,\n        JBFundAccessLimitGroup[] memory fundAccessConstaints\n    )\n        external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBMigratable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface IJBMigratable is IERC165 {\n    function receiveMigrationFrom(IERC165 from, uint256 projectId) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBPayHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBAfterPayRecordedContext} from \"./../structs/JBAfterPayRecordedContext.sol\";\n\n/// @notice Hook called after a terminal's `pay(...)` logic completes (if passed by the ruleset's data hook).\ninterface IJBPayHook is IERC165 {\n    /// @notice This function is called by the terminal's `pay(...)` function after the payment has been recorded in the\n    /// terminal store.\n    /// @dev Critical business logic should be protected by appropriate access control.\n    /// @param context The context passed in by the terminal, as a `JBAfterPayRecordedContext` struct.\n    function afterPayRecordedWith(JBAfterPayRecordedContext calldata context) external payable;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBPermissioned.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBPermissions} from \"./IJBPermissions.sol\";\n\ninterface IJBPermissioned {\n    function PERMISSIONS() external view returns (IJBPermissions);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBPermissions.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBPermissionsData} from \"./../structs/JBPermissionsData.sol\";\n\ninterface IJBPermissions {\n    event OperatorPermissionsSet(\n        address indexed operator,\n        address indexed account,\n        uint256 indexed projectId,\n        uint256[] permissionIds,\n        uint256 packed,\n        address caller\n    );\n\n    function permissionsOf(address operator, address account, uint256 projectId) external view returns (uint256);\n\n    function hasPermission(\n        address operator,\n        address account,\n        uint256 projectId,\n        uint256 permissionId\n    )\n        external\n        view\n        returns (bool);\n\n    function hasPermissions(\n        address operator,\n        address account,\n        uint256 projectId,\n        uint256[] calldata permissionIds\n    )\n        external\n        view\n        returns (bool);\n\n    function setPermissionsFor(address account, JBPermissionsData calldata permissionsData) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBPriceFeed.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBPriceFeed {\n    function currentUnitPrice(uint256 targetDecimals) external view returns (uint256);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBPrices.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBPriceFeed} from \"./IJBPriceFeed.sol\";\nimport {IJBProjects} from \"./IJBProjects.sol\";\n\ninterface IJBPrices {\n    event AddPriceFeed(\n        uint256 indexed projectId, uint256 indexed pricingCurrency, uint256 indexed unitCurrency, IJBPriceFeed feed\n    );\n\n    function DEFAULT_PROJECT_ID() external view returns (uint256);\n\n    function PROJECTS() external view returns (IJBProjects);\n\n    function priceFeedFor(\n        uint256 projectId,\n        uint256 pricingCurrency,\n        uint256 unitCurrency\n    )\n        external\n        view\n        returns (IJBPriceFeed);\n\n    function pricePerUnitOf(\n        uint256 projectId,\n        uint256 pricingCurrency,\n        uint256 unitCurrency,\n        uint256 decimals\n    )\n        external\n        view\n        returns (uint256);\n\n    function addPriceFeedFor(\n        uint256 projectId,\n        uint256 pricingCurrency,\n        uint256 unitCurrency,\n        IJBPriceFeed priceFeed\n    )\n        external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBProjectUriRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBProjectUriRegistry {\n    function uriOf(uint256 projectId) external view returns (string memory);\n    function setUriOf(uint256 projectId, string calldata metadata) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBProjects.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IJBTokenUriResolver} from \"./IJBTokenUriResolver.sol\";\n\ninterface IJBProjects is IERC721 {\n    event Create(uint256 indexed projectId, address indexed owner, address caller);\n\n    event SetTokenUriResolver(IJBTokenUriResolver indexed resolver, address caller);\n\n    function count() external view returns (uint256);\n\n    function tokenUriResolver() external view returns (IJBTokenUriResolver);\n\n    function createFor(address owner) external returns (uint256 projectId);\n\n    function setTokenUriResolver(IJBTokenUriResolver newResolver) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBRedeemHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBAfterRedeemRecordedContext} from \"./../structs/JBAfterRedeemRecordedContext.sol\";\n\n/// @notice Hook called after a terminal's `redeemTokensOf(...)` logic completes (if passed by the ruleset's data hook).\ninterface IJBRedeemHook is IERC165 {\n    /// @notice This function is called by the terminal's `redeemTokensOf(...)` function after the redemption has been\n    /// recorded in the terminal store.\n    /// @dev Critical business logic should be protected by appropriate access control.\n    /// @param context The context passed in by the terminal, as a `JBAfterRedeemRecordedContext` struct.\n    function afterRedeemRecordedWith(JBAfterRedeemRecordedContext calldata context) external payable;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBRulesetApprovalHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBApprovalStatus} from \"./../enums/JBApprovalStatus.sol\";\n\ninterface IJBRulesetApprovalHook is IERC165 {\n    function DURATION() external view returns (uint256);\n\n    function approvalStatusOf(\n        uint256 projectId,\n        uint256 rulesetId,\n        uint256 start\n    )\n        external\n        view\n        returns (JBApprovalStatus);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBRulesetDataHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBPayHookSpecification} from \"./../structs/JBPayHookSpecification.sol\";\nimport {JBBeforePayRecordedContext} from \"./../structs/JBBeforePayRecordedContext.sol\";\nimport {JBBeforeRedeemRecordedContext} from \"./../structs/JBBeforeRedeemRecordedContext.sol\";\nimport {JBRedeemHookSpecification} from \"./../structs/JBRedeemHookSpecification.sol\";\n\n/// @notice Data hooks can extend a terminal's core pay/redeem functionality by overriding the weight or memo. They can\n/// also specify pay/redeem hooks for the terminal to fulfill, or allow addresses to mint a project's tokens on-demand.\n/// @dev If a project's ruleset has `useDataHookForPay` or `useDataHookForRedeem` enabled, its `dataHook` is called by\n/// the terminal upon payments/redemptions (respectively).\ninterface IJBRulesetDataHook is IERC165 {\n    /// @notice A flag indicating whether an address has permission to mint a project's tokens on-demand.\n    /// @dev A project's data hook can allow any address to mint its tokens.\n    /// @param projectId The ID of the project whose token can be minted.\n    /// @param addr The address to check the token minting permission of.\n    /// @return flag A flag indicating whether the address has permission to mint the project's tokens on-demand.\n    function hasMintPermissionFor(uint256 projectId, address addr) external view returns (bool flag);\n\n    /// @notice The data calculated before a payment is recorded in the terminal store. This data is provided to the\n    /// terminal's `pay(...)` transaction.\n    /// @param context The context passed to this data hook by the `pay(...)` function as a `JBBeforePayRecordedContext`\n    /// struct.\n    /// @return weight The new `weight` to use, overriding the ruleset's `weight`.\n    /// @return hookSpecifications The amount and data to send to pay hooks instead of adding to the terminal's balance.\n    function beforePayRecordedWith(JBBeforePayRecordedContext calldata context)\n        external\n        view\n        returns (uint256 weight, JBPayHookSpecification[] memory hookSpecifications);\n\n    /// @notice The data calculated before a redemption is recorded in the terminal store. This data is provided to the\n    /// terminal's `redeemTokensOf(...)` transaction.\n    /// @param context The context passed to this data hook by the `redeemTokensOf(...)` function as a\n    /// `JBBeforeRedeemRecordedContext` struct.\n    /// @return redemptionRate The rate determining the amount that should be reclaimable for a given surplus and token\n    /// supply.\n    /// @return redeemCount The amount of tokens that should be considered redeemed.\n    /// @return totalSupply The total amount of tokens that are considered to be existing.\n    /// @return hookSpecifications The amount and data to send to redeem hooks instead of returning to the beneficiary.\n    function beforeRedeemRecordedWith(JBBeforeRedeemRecordedContext calldata context)\n        external\n        view\n        returns (\n            uint256 redemptionRate,\n            uint256 redeemCount,\n            uint256 totalSupply,\n            JBRedeemHookSpecification[] memory hookSpecifications\n        );\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBRulesets.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBApprovalStatus} from \"./../enums/JBApprovalStatus.sol\";\nimport {JBRuleset} from \"./../structs/JBRuleset.sol\";\nimport {IJBControlled} from \"./IJBControlled.sol\";\nimport {IJBRulesetApprovalHook} from \"./IJBRulesetApprovalHook.sol\";\n\ninterface IJBRulesets is IJBControlled {\n    event RulesetQueued(\n        uint256 indexed rulesetId,\n        uint256 indexed projectId,\n        uint256 duration,\n        uint256 weight,\n        uint256 decayRate,\n        IJBRulesetApprovalHook hook,\n        uint256 metadata,\n        uint256 mustStartAtOrAfter,\n        address caller\n    );\n\n    event RulesetInitialized(uint256 indexed rulesetId, uint256 indexed projectId, uint256 indexed basedOnId);\n\n    function latestRulesetIdOf(uint256 projectId) external view returns (uint256);\n\n    function getRulesetOf(uint256 projectId, uint256 rulesetId) external view returns (JBRuleset memory);\n\n    function latestQueuedRulesetOf(uint256 projectId)\n        external\n        view\n        returns (JBRuleset memory ruleset, JBApprovalStatus approvalStatus);\n\n    function rulesetsOf(\n        uint256 projectId,\n        uint256 startingId,\n        uint256 size\n    )\n        external\n        view\n        returns (JBRuleset[] memory rulesets);\n\n    function upcomingRulesetOf(uint256 projectId) external view returns (JBRuleset memory ruleset);\n\n    function currentOf(uint256 projectId) external view returns (JBRuleset memory ruleset);\n\n    function currentApprovalStatusForLatestRulesetOf(uint256 projectId) external view returns (JBApprovalStatus);\n\n    function queueFor(\n        uint256 projectId,\n        uint256 duration,\n        uint256 weight,\n        uint256 decayRate,\n        IJBRulesetApprovalHook approvalHook,\n        uint256 metadata,\n        uint256 mustStartAtOrAfter\n    )\n        external\n        returns (JBRuleset memory ruleset);\n\n    function updateRulesetWeightCache(uint256 projectId) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBSplitHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {JBSplitHookContext} from \"../structs/JBSplitHookContext.sol\";\n\n/// @title Split hook\n/// @notice Allows processing a single split with custom logic.\n/// @dev The split hook's address should be set as the `hook` in the relevant split.\ninterface IJBSplitHook is IERC165 {\n    /// @notice If a split has a split hook, payment terminals and controllers call this function while processing the\n    /// split.\n    /// @dev Critical business logic should be protected by appropriate access control. The tokens and/or native tokens\n    /// are optimistically transferred to the split hook when this function is called.\n    /// @param context The context passed by the terminal/controller to the split hook as a `JBSplitHookContext` struct:\n    function processSplitWith(JBSplitHookContext calldata context) external payable;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBSplits.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBSplitGroup} from \"./../structs/JBSplitGroup.sol\";\nimport {JBSplit} from \"./../structs/JBSplit.sol\";\nimport {IJBProjects} from \"./IJBProjects.sol\";\nimport {IJBControlled} from \"./IJBControlled.sol\";\n\ninterface IJBSplits is IJBControlled {\n    event SetSplit(\n        uint256 indexed projectId, uint256 indexed rulesetId, uint256 indexed group, JBSplit split, address caller\n    );\n\n    function FALLBACK_RULESET_ID() external view returns (uint256);\n\n    function splitsOf(uint256 projectId, uint256 rulesetId, uint256 group) external view returns (JBSplit[] memory);\n\n    function setSplitGroupsOf(uint256 projectId, uint256 rulesetId, JBSplitGroup[] memory splitGroups) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBToken {\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBTokenUriResolver.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBTokenUriResolver {\n    function getUri(uint256 projectId) external view returns (string memory tokenUri);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/IJBTokens.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBToken} from \"./IJBToken.sol\";\nimport {IJBControlled} from \"./IJBControlled.sol\";\n\ninterface IJBTokens is IJBControlled {\n    event DeployERC20(\n        uint256 indexed projectId, IJBToken indexed token, string name, string symbol, bytes32 salt, address caller\n    );\n\n    event Mint(\n        address indexed holder, uint256 indexed projectId, uint256 amount, bool tokensWereClaimed, address caller\n    );\n\n    event Burn(\n        address indexed holder,\n        uint256 indexed projectId,\n        uint256 amount,\n        uint256 initialCreditBalance,\n        uint256 initialTokenBalance,\n        address caller\n    );\n\n    event ClaimTokens(\n        address indexed holder,\n        uint256 indexed projectId,\n        uint256 initialCreditBalance,\n        uint256 amount,\n        address beneficiary,\n        address caller\n    );\n\n    event SetToken(uint256 indexed projectId, IJBToken indexed newToken, address caller);\n\n    event TransferCredits(\n        address indexed holder, uint256 indexed projectId, address indexed recipient, uint256 amount, address caller\n    );\n\n    function tokenOf(uint256 projectId) external view returns (IJBToken);\n\n    function projectIdOf(IJBToken token) external view returns (uint256);\n\n    function creditBalanceOf(address holder, uint256 projectId) external view returns (uint256);\n\n    function totalCreditSupplyOf(uint256 projectId) external view returns (uint256);\n\n    function totalSupplyOf(uint256 projectId) external view returns (uint256);\n\n    function totalBalanceOf(address holder, uint256 projectId) external view returns (uint256 result);\n\n    function deployERC20For(\n        uint256 projectId,\n        string calldata name,\n        string calldata symbol,\n        bytes32 salt\n    )\n        external\n        returns (IJBToken token);\n\n    function setTokenFor(uint256 projectId, IJBToken token) external;\n\n    function burnFrom(address holder, uint256 projectId, uint256 amount) external;\n\n    function mintFor(address holder, uint256 projectId, uint256 amount) external;\n\n    function claimTokensFor(address holder, uint256 projectId, uint256 amount, address beneficiary) external;\n\n    function transferCreditsFrom(address holder, uint256 projectId, address recipient, uint256 amount) external;\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/terminal/IJBPayoutTerminal.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBTerminal} from \"./IJBTerminal.sol\";\nimport {JBSplit} from \"../../structs/JBSplit.sol\";\nimport {IJBSplits} from \"../IJBSplits.sol\";\n\n/// @notice A terminal that can send payouts.\ninterface IJBPayoutTerminal is IJBTerminal {\n    event SendPayouts(\n        uint256 indexed rulesetId,\n        uint256 indexed rulesetCycleNumber,\n        uint256 indexed projectId,\n        address beneficiary,\n        uint256 amount,\n        uint256 amountPaidOut,\n        uint256 fee,\n        uint256 beneficiaryDistributionAmount,\n        address caller\n    );\n\n    event SendPayoutToSplit(\n        uint256 indexed projectId,\n        uint256 indexed rulesetId,\n        uint256 indexed group,\n        JBSplit split,\n        uint256 amount,\n        uint256 netAmount,\n        address caller\n    );\n\n    event UseAllowance(\n        uint256 indexed rulesetId,\n        uint256 indexed rulesetCycleNumber,\n        uint256 indexed projectId,\n        address beneficiary,\n        uint256 amount,\n        uint256 amountPaidOut,\n        uint256 netAmountPaidOut,\n        string memo,\n        address caller\n    );\n\n    event PayoutReverted(uint256 indexed projectId, JBSplit split, uint256 amount, bytes reason, address caller);\n\n    function sendPayoutsOf(\n        uint256 projectId,\n        address token,\n        uint256 amount,\n        uint256 currency,\n        uint256 minTokensPaidOut\n    )\n        external\n        returns (uint256 netLeftoverPayoutAmount);\n\n    function useAllowanceOf(\n        uint256 projectId,\n        address token,\n        uint256 amount,\n        uint256 currency,\n        uint256 minTokensPaidOut,\n        address payable beneficiary,\n        string calldata memo\n    )\n        external\n        returns (uint256 netAmountPaidOut);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/terminal/IJBRedeemTerminal.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBTerminal} from \"./IJBTerminal.sol\";\nimport {IJBRedeemHook} from \"../IJBRedeemHook.sol\";\nimport {JBAfterRedeemRecordedContext} from \"../../structs/JBAfterRedeemRecordedContext.sol\";\n\n/// @notice A terminal that can be redeemed from.\ninterface IJBRedeemTerminal is IJBTerminal {\n    event RedeemTokens(\n        uint256 indexed rulesetId,\n        uint256 indexed rulesetCycleNumber,\n        uint256 indexed projectId,\n        address holder,\n        address beneficiary,\n        uint256 tokenCount,\n        uint256 redemptionRate,\n        uint256 reclaimedAmount,\n        bytes metadata,\n        address caller\n    );\n\n    event HookAfterRecordRedeem(\n        IJBRedeemHook indexed hook,\n        JBAfterRedeemRecordedContext context,\n        uint256 specificationAmount,\n        uint256 fee,\n        address caller\n    );\n\n    function redeemTokensOf(\n        address holder,\n        uint256 projectId,\n        address tokenToReclaim,\n        uint256 redeemCount,\n        uint256 minTokensReclaimed,\n        address payable beneficiary,\n        bytes calldata metadata\n    )\n        external\n        returns (uint256 reclaimAmount);\n}\n"
			},
			"node_modules/@bananapus/core/src/interfaces/terminal/IJBTerminal.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBAccountingContext} from \"../../structs/JBAccountingContext.sol\";\nimport {JBAfterPayRecordedContext} from \"../../structs/JBAfterPayRecordedContext.sol\";\n\nimport {IJBPayHook} from \"../../interfaces/IJBPayHook.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/// @notice A terminal that accepts payments and can be migrated.\ninterface IJBTerminal is IERC165 {\n    event MigrateTerminal(\n        uint256 indexed projectId, address indexed token, IJBTerminal indexed to, uint256 amount, address caller\n    );\n\n    event AddToBalance(\n        uint256 indexed projectId, uint256 amount, uint256 unlockedFees, string memo, bytes metadata, address caller\n    );\n\n    event SetAccountingContext(\n        uint256 indexed projectId, address indexed token, JBAccountingContext context, address caller\n    );\n\n    event Pay(\n        uint256 indexed rulesetId,\n        uint256 indexed rulesetCycleNumber,\n        uint256 indexed projectId,\n        address payer,\n        address beneficiary,\n        uint256 amount,\n        uint256 beneficiaryTokenCount,\n        string memo,\n        bytes metadata,\n        address caller\n    );\n\n    event HookAfterRecordPay(\n        IJBPayHook indexed hook, JBAfterPayRecordedContext context, uint256 specificationAmount, address caller\n    );\n\n    function accountingContextForTokenOf(\n        uint256 projectId,\n        address token\n    )\n        external\n        view\n        returns (JBAccountingContext memory);\n\n    function accountingContextsOf(uint256 projectId) external view returns (JBAccountingContext[] memory);\n\n    function currentSurplusOf(uint256 projectId, uint256 decimals, uint256 currency) external view returns (uint256);\n\n    function migrateBalanceOf(uint256 projectId, address token, IJBTerminal to) external returns (uint256 balance);\n\n    function addAccountingContextsFor(uint256 projectId, address[] calldata tokens) external;\n\n    function pay(\n        uint256 projectId,\n        address token,\n        uint256 amount,\n        address beneficiary,\n        uint256 minReturnedTokens,\n        string calldata memo,\n        bytes calldata metadata\n    )\n        external\n        payable\n        returns (uint256 beneficiaryTokenCount);\n\n    function addToBalanceOf(\n        uint256 projectId,\n        address token,\n        uint256 amount,\n        bool shouldReturnHeldFees,\n        string calldata memo,\n        bytes calldata metadata\n    )\n        external\n        payable;\n}\n"
			},
			"node_modules/@bananapus/core/src/libraries/JBConstants.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice Global constants used across Juicebox contracts.\nlibrary JBConstants {\n    /// @notice Each chain's native token address in Juicebox is represented by\n    /// 0x000000000000000000000000000000000000EEEe.\n    address public constant NATIVE_TOKEN = address(0x000000000000000000000000000000000000EEEe);\n    uint256 public constant MAX_RESERVED_RATE = 10_000;\n    uint256 public constant MAX_REDEMPTION_RATE = 10_000;\n    uint256 public constant MAX_DECAY_RATE = 1_000_000_000;\n    uint256 public constant SPLITS_TOTAL_PERCENT = 1_000_000_000;\n    uint256 public constant MAX_FEE = 1000;\n    uint256 public constant MAX_FEE_DISCOUNT = 1_000_000_000;\n}\n"
			},
			"node_modules/@bananapus/core/src/libraries/JBRulesetMetadataResolver.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {JBRuleset} from \"./../structs/JBRuleset.sol\";\nimport {JBRulesetMetadata} from \"./../structs/JBRulesetMetadata.sol\";\n\nlibrary JBRulesetMetadataResolver {\n    function reservedRate(JBRuleset memory ruleset) internal pure returns (uint256) {\n        return uint256(uint16(ruleset.metadata >> 4));\n    }\n\n    function redemptionRate(JBRuleset memory ruleset) internal pure returns (uint256) {\n        // Redemption rate is a number 0-10000.\n        return uint256(uint16(ruleset.metadata >> 20));\n    }\n\n    function setRedemptionRateTo(JBRuleset memory ruleset, uint256 value) internal pure returns (JBRuleset memory) {\n        // redemption rate in bits 20-35 (16 bits).\n        // redemption rate is a number 0-10000.\n        JBRulesetMetadata memory adjustedMetadata = expandMetadata(ruleset);\n        adjustedMetadata.redemptionRate = value;\n        ruleset.metadata = packRulesetMetadata(adjustedMetadata);\n        return ruleset;\n    }\n\n    function baseCurrency(JBRuleset memory ruleset) internal pure returns (uint256) {\n        // Currency is a number 0-4294967296.\n        return uint256(uint32(ruleset.metadata >> 36));\n    }\n\n    function pausePay(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 68) & 1) == 1;\n    }\n\n    function pauseCreditTransfers(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 69) & 1) == 1;\n    }\n\n    function allowOwnerMinting(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 70) & 1) == 1;\n    }\n\n    function allowTerminalMigration(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 71) & 1) == 1;\n    }\n\n    function allowSetTerminals(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 72) & 1) == 1;\n    }\n\n    function allowControllerMigration(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 73) & 1) == 1;\n    }\n\n    function allowSetController(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 74) & 1) == 1;\n    }\n\n    function holdFees(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 75) & 1) == 1;\n    }\n\n    function useTotalSurplusForRedemptions(JBRuleset memory ruleset) internal pure returns (bool) {\n        return ((ruleset.metadata >> 76) & 1) == 1;\n    }\n\n    function useDataHookForPay(JBRuleset memory ruleset) internal pure returns (bool) {\n        return (ruleset.metadata >> 77) & 1 == 1;\n    }\n\n    function useDataHookForRedeem(JBRuleset memory ruleset) internal pure returns (bool) {\n        return (ruleset.metadata >> 78) & 1 == 1;\n    }\n\n    function dataHook(JBRuleset memory ruleset) internal pure returns (address) {\n        return address(uint160(ruleset.metadata >> 79));\n    }\n\n    function metadata(JBRuleset memory ruleset) internal pure returns (uint256) {\n        return uint256(uint16(ruleset.metadata >> 239));\n    }\n\n    /// @notice Pack the funding cycle metadata.\n    /// @param rulesetMetadata The ruleset metadata to validate and pack.\n    /// @return packed The packed uint256 of all metadata params. The first 8 bits specify the version.\n    function packRulesetMetadata(JBRulesetMetadata memory rulesetMetadata) internal pure returns (uint256 packed) {\n        // version 1 in the bits 0-3 (4 bits).\n        packed = 1;\n        // reserved rate in bits 4-19 (16 bits).\n        packed |= rulesetMetadata.reservedRate << 4;\n        // redemption rate in bits 20-35 (16 bits).\n        // redemption rate is a number 0-10000.\n        packed |= rulesetMetadata.redemptionRate << 20;\n        // base currency in bits 36-67 (32 bits).\n        // base currency is a number 0-16777215.\n        packed |= rulesetMetadata.baseCurrency << 36;\n        // pause pay in bit 68.\n        if (rulesetMetadata.pausePay) packed |= 1 << 68;\n        // pause credit transfers in bit 69.\n        if (rulesetMetadata.pauseCreditTransfers) packed |= 1 << 69;\n        // allow discretionary minting in bit 70.\n        if (rulesetMetadata.allowOwnerMinting) packed |= 1 << 70;\n        // allow terminal migration in bit 71.\n        if (rulesetMetadata.allowTerminalMigration) packed |= 1 << 71;\n        // allow set terminals in bit 72.\n        if (rulesetMetadata.allowSetTerminals) packed |= 1 << 72;\n        // allow controller migration in bit 73.\n        if (rulesetMetadata.allowControllerMigration) packed |= 1 << 73;\n        // allow set controller in bit 74.\n        if (rulesetMetadata.allowSetController) packed |= 1 << 74;\n        // hold fees in bit 75.\n        if (rulesetMetadata.holdFees) packed |= 1 << 75;\n        // useTotalSurplusForRedemptions in bit 76.\n        if (rulesetMetadata.useTotalSurplusForRedemptions) packed |= 1 << 76;\n        // use pay data source in bit 77.\n        if (rulesetMetadata.useDataHookForPay) packed |= 1 << 77;\n        // use redeem data source in bit 78.\n        if (rulesetMetadata.useDataHookForRedeem) packed |= 1 << 78;\n        // data source address in bits 79-238.\n        packed |= uint256(uint160(address(rulesetMetadata.dataHook))) << 79;\n        // metadata in bits 239-254 (16 bits).\n        packed |= rulesetMetadata.metadata << 239;\n    }\n\n    /// @notice Expand the funding cycle metadata.\n    /// @param ruleset The funding cycle having its metadata expanded.\n    /// @return rulesetMetadata The ruleset's metadata object.\n    function expandMetadata(JBRuleset memory ruleset) internal pure returns (JBRulesetMetadata memory) {\n        return JBRulesetMetadata(\n            reservedRate(ruleset),\n            redemptionRate(ruleset),\n            baseCurrency(ruleset),\n            pausePay(ruleset),\n            pauseCreditTransfers(ruleset),\n            allowOwnerMinting(ruleset),\n            allowTerminalMigration(ruleset),\n            allowSetTerminals(ruleset),\n            allowControllerMigration(ruleset),\n            allowSetController(ruleset),\n            holdFees(ruleset),\n            useTotalSurplusForRedemptions(ruleset),\n            useDataHookForPay(ruleset),\n            useDataHookForRedeem(ruleset),\n            dataHook(ruleset),\n            metadata(ruleset)\n        );\n    }\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBAccountingContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @custom:member token The address of the token that accounting is being done with.\n/// @custom:member decimals The number of decimals expected in that token's fixed point accounting.\n/// @custom:member currency The currency that the token is priced in terms of.\nstruct JBAccountingContext {\n    address token;\n    uint8 decimals;\n    uint32 currency;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBAfterPayRecordedContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBTokenAmount} from \"./JBTokenAmount.sol\";\n\n/// @custom:member payer The address the payment originated from.\n/// @custom:member projectId The ID of the project being paid.\n/// @custom:member rulesetId The ID of the ruleset the payment is being made during.\n/// @custom:member amount The payment's token amount. Includes the token being paid, the value, the number of decimals\n/// included, and the currency of the amount.\n/// @custom:member forwardedAmount The token amount being forwarded to the pay hook. Includes the token\n/// being paid, the value, the number of decimals included, and the currency of the amount.\n/// @custom:member weight The current ruleset's weight (used to determine how many tokens should be minted).\n/// @custom:member projectTokenCount The number of project tokens minted for the beneficiary.\n/// @custom:member beneficiary The address which receives any tokens this payment yields.\n/// @custom:member hookMetadata Extra data specified by the data hook, which is sent to the pay hook.\n/// @custom:member payerMetadata Extra data specified by the payer, which is sent to the pay hook.\nstruct JBAfterPayRecordedContext {\n    address payer;\n    uint256 projectId;\n    uint256 rulesetId;\n    JBTokenAmount amount;\n    JBTokenAmount forwardedAmount;\n    uint256 weight;\n    uint256 projectTokenCount;\n    address beneficiary;\n    bytes hookMetadata;\n    bytes payerMetadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBAfterRedeemRecordedContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBTokenAmount} from \"./JBTokenAmount.sol\";\n\n/// @custom:member holder The holder of the tokens being redeemed.\n/// @custom:member projectId The ID of the project being redeemed from.\n/// @custom:member rulesetId The ID of the ruleset the redemption is being made during.\n/// @custom:member redeemCount The number of project tokens being redeemed.\n/// @custom:member redemptionRate The current ruleset's redemption rate.\n/// @custom:member reclaimedAmount The token amount being reclaimed from the project's terminal balance. Includes the\n/// token being\n/// reclaimed, the value, the number of decimals included, and the currency of the amount.\n/// @custom:member forwardedAmount The token amount being forwarded to the redeem hook. Includes the token\n/// being forwarded, the value, the number of decimals included, and the currency of the amount.\n/// @custom:member beneficiary The address the reclaimed amount will be sent to.\n/// @custom:member hookMetadata Extra data specified by the data hook, which is sent to the redeem hook.\n/// @custom:member redeemerMetadata Extra data specified by the redeemer, which is sent to the redeem hook.\nstruct JBAfterRedeemRecordedContext {\n    address holder;\n    uint256 projectId;\n    uint256 rulesetId;\n    uint256 redeemCount;\n    JBTokenAmount reclaimedAmount;\n    JBTokenAmount forwardedAmount;\n    uint256 redemptionRate;\n    address payable beneficiary;\n    bytes hookMetadata;\n    bytes redeemerMetadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBBeforePayRecordedContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBTokenAmount} from \"./JBTokenAmount.sol\";\n\n/// @notice Context sent from the terminal to the ruleset's data hook upon payment.\n/// @custom:member terminal The terminal that is facilitating the payment.\n/// @custom:member payer The address that the payment originated from.\n/// @custom:member amount The payment's token amount, including the token being paid, the value, the number of decimals\n/// included, and the currency of the amount.\n/// @custom:member projectId The ID of the project being paid.\n/// @custom:member rulesetId The ID of the ruleset the payment is being made during.\n/// @custom:member beneficiary The specified address that should be the beneficiary of anything that this payment\n/// yields.\n/// @custom:member weight The weight of the ruleset during which the payment is being made.\n/// @custom:member reservedRate The reserved rate of the ruleset the payment is being made during.\n/// @custom:member metadata Extra data specified by the payer.\nstruct JBBeforePayRecordedContext {\n    address terminal;\n    address payer;\n    JBTokenAmount amount;\n    uint256 projectId;\n    uint256 rulesetId;\n    address beneficiary;\n    uint256 weight;\n    uint256 reservedRate;\n    bytes metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBBeforeRedeemRecordedContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBTokenAmount} from \"./JBTokenAmount.sol\";\n\n/// @notice Context sent from the terminal to the ruleset's data hook upon redemption.\n/// @custom:member terminal The terminal that is facilitating the redemption.\n/// @custom:member holder The holder of the tokens being redeemed.\n/// @custom:member projectId The ID of the project whose tokens are being redeemed.\n/// @custom:member rulesetId The ID of the ruleset the redemption is being made during.\n/// @custom:member redeemCount The number of tokens being redeemed, as a fixed point number with 18 decimals.\n/// @custom:member totalSupply The total token supply being used for the calculation, as a fixed point number with 18\n/// decimals.\n/// @custom:member surplus The surplus amount used for the calculation, as a fixed point number with 18 decimals.\n/// Includes the token of the surplus, the surplus value, the number of decimals\n/// included, and the currency of the surplus.\n/// @custom:member useTotalSurplus If surplus across all of a project's terminals is being used when making redemptions.\n/// @custom:member redemptionRate The redemption rate of the ruleset the redemption is being made during.\n/// @custom:member metadata Extra data provided by the redeemer.\nstruct JBBeforeRedeemRecordedContext {\n    address terminal;\n    address holder;\n    uint256 projectId;\n    uint256 rulesetId;\n    uint256 redeemCount;\n    uint256 totalSupply;\n    JBTokenAmount surplus;\n    bool useTotalSurplus;\n    uint256 redemptionRate;\n    bytes metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBCurrencyAmount.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @custom:member amount The amount of the currency.\n/// @custom:member currency The currency's index in `JBCurrencyIds`.\nstruct JBCurrencyAmount {\n    uint256 amount;\n    uint256 currency;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBFundAccessLimitGroup.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBCurrencyAmount} from \"./JBCurrencyAmount.sol\";\n\n/// @dev Payout limit example: if the `amount` is 5, the `currency` is 1 (USD), and the terminal's token is ETH, then\n/// the project can pay out 5 USD worth of ETH during a ruleset.\n/// @dev Surplus allowance example: if the `amount` is 5, the `currency` is 1 (USD), and the terminal's token is ETH,\n/// then the project can pay out 5 USD worth of ETH from its surplus during a ruleset. A project's surplus is its\n/// balance minus its current combined payout limit.\n/// @dev If a project has multiple payout limits or surplus allowances, they are all available. They can all be used\n/// during a single ruleset.\n/// @dev The payout limits' and surplus allowances' fixed point amounts have the same number of decimals as the\n/// terminal.\n/// @custom:member terminal The terminal that the payout limits and surplus allowances apply to.\n/// @custom:member token The token that the payout limits and surplus allowances apply to within the `terminal`.\n/// @custom:member payoutLimits An array of payout limits. The payout limits cumulatively dictate the maximum value of\n/// `token`s a project can pay out from its balance in a terminal during a ruleset. Each payout limit can have a unique\n/// currency and amount.\n/// @custom:member surplusAllowances An array of surplus allowances. The surplus allowances cumulatively dictates the\n/// maximum value of `token`s a project can pay out from its surplus (balance less payouts) in a terminal during a\n/// ruleset. Each surplus allowance can have a unique currency and amount.\nstruct JBFundAccessLimitGroup {\n    address terminal;\n    address token;\n    JBCurrencyAmount[] payoutLimits;\n    JBCurrencyAmount[] surplusAllowances;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBPayHookSpecification.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBPayHook} from \"../interfaces/IJBPayHook.sol\";\n\n/// @notice A pay hook specification sent from the ruleset's data hook back to the terminal. This specification is\n/// fulfilled by the terminal.\n/// @custom:member hook The pay hook to use when fulfilling this specification.\n/// @custom:member amount The amount to send to the hook.\n/// @custom:member metadata Metadata to pass the hook.\nstruct JBPayHookSpecification {\n    IJBPayHook hook;\n    uint256 amount;\n    bytes metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBPermissionsData.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @custom:member operator The address that permissions are being given to.\n/// @custom:member projectId The ID of the project the operator is being given permissions for. Operators only have\n/// permissions under this project's scope. An ID of 0 is a wildcard, which gives an operator permissions across all\n/// projects.\n/// @custom:member permissionIds The IDs of the permissions being given. See the `JBPermissionIds` library.\nstruct JBPermissionsData {\n    address operator;\n    uint256 projectId;\n    uint256[] permissionIds;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBRedeemHookSpecification.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBRedeemHook} from \"../interfaces/IJBRedeemHook.sol\";\n\n/// @notice A redeem hook specification sent from the ruleset's data hook back to the terminal. This specification is\n/// fulfilled by the terminal.\n/// @custom:member hook The redeem hook to use when fulfilling this specification.\n/// @custom:member amount The amount to send to the hook.\n/// @custom:member metadata Metadata to pass to the hook.\nstruct JBRedeemHookSpecification {\n    IJBRedeemHook hook;\n    uint256 amount;\n    bytes metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBRuleset.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBRulesetApprovalHook} from \"./../interfaces/IJBRulesetApprovalHook.sol\";\n\n/// @dev `JBRuleset` timestamps are unix timestamps (seconds since 00:00 January 1st, 1970 UTC).\n/// @custom:member cycleNumber The ruleset's cycle number. Each ruleset's `cycleNumber` is the previous ruleset's\n/// `cycleNumber` plus one. Each project's first ruleset has a `cycleNumber` of 1.\n/// @custom:member id The ruleset's ID, which is a timestamp of when this ruleset's rules were initialized. The\n/// `rulesetId` stays the same for rulesets that automatically cycle over from a manually queued ruleset.\n/// @custom:member basedOnId The `rulesetId` of the ruleset which was active when this ruleset was created.\n/// @custom:member start The timestamp from which this ruleset is considered active.\n/// @custom:member duration The number of seconds the ruleset lasts for. After this duration, a new ruleset will start.\n/// The project owner can queue new rulesets at any time, which will take effect once the current ruleset's duration is\n/// over. If the `duration` is 0, newly queued rulesets will take effect immediately. If a ruleset ends and there are no\n/// new rulesets queued, the current ruleset cycles over to another one with the same properties but a new `start`\n/// timestamp and a `weight` reduced by the ruleset's `decayRate`.\n/// @custom:member weight A fixed point number with 18 decimals which is typically used by payment terminals to\n/// determine how many tokens should be minted when a payment is received. This can be used by other contracts for\n/// arbitrary calculations.\n/// @custom:member decayRate The percentage by which to reduce the `weight` each time a new ruleset starts. `weight` is\n/// a percentage out of `JBConstants.MAX_DECAY_RATE`. If it's 0, the next ruleset will have the same `weight` by\n/// default. If it's 90%, the next ruleset's `weight` will be 10% smaller. If a ruleset explicitly sets a new `weight`,\n/// the `decayRate` doesn't apply.\n/// @custom:member approvalHook An address of a contract that says whether a queued ruleset should be approved or\n/// rejected. If a\n/// ruleset is rejected, it won't go into effect. An approval hook can be used to create rules which dictate how a\n/// project owner can change their ruleset over time.\n/// @custom:member metadata Extra data associated with a ruleset which can be used by other contracts.\nstruct JBRuleset {\n    uint256 cycleNumber;\n    uint256 id;\n    uint256 basedOnId;\n    uint256 start;\n    uint256 duration;\n    uint256 weight;\n    uint256 decayRate;\n    IJBRulesetApprovalHook approvalHook;\n    uint256 metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBRulesetConfig.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBRulesetApprovalHook} from \"../interfaces/IJBRulesetApprovalHook.sol\";\nimport {JBRulesetMetadata} from \"./JBRulesetMetadata.sol\";\nimport {JBSplitGroup} from \"./JBSplitGroup.sol\";\nimport {JBFundAccessLimitGroup} from \"./JBFundAccessLimitGroup.sol\";\n\n/// @custom:member mustStartAtOrAfter The earliest time the ruleset can start.\n/// @custom:member duration The number of seconds the ruleset lasts for, after which a new ruleset will start. A\n/// duration of 0 means that the ruleset will stay active until the project owner explicitly issues a reconfiguration,\n/// at which point a new ruleset will immediately start with the updated properties. If the duration is greater than 0,\n/// a project owner cannot make changes to a ruleset's parameters while it is active – any proposed changes will apply\n/// to the subsequent ruleset. If no changes are proposed, a ruleset rolls over to another one with the same properties\n/// but new `start` timestamp and a decayed `weight`.\n/// @custom:member weight A fixed point number with 18 decimals that contracts can use to base arbitrary calculations\n/// on. For example, payment terminals can use this to determine how many tokens should be minted when a payment is\n/// received.\n/// @custom:member decayRate A percent by how much the `weight` of the subsequent ruleset should be reduced, if the\n/// project owner hasn't queued the subsequent ruleset with an explicit `weight`. If it's 0, each ruleset will have\n/// equal weight. If the number is 90%, the next ruleset will have a 10% smaller weight. This weight is out of\n/// `JBConstants.MAX_DECAY_RATE`.\n/// @custom:member approvalHook An address of a contract that says whether a proposed ruleset should be accepted or\n/// rejected. It\n/// can be used to create rules around how a project owner can change ruleset parameters over time.\n/// @custom:member metadata Metadata specifying the controller-specific parameters that a ruleset can have. These\n/// properties cannot change until the next ruleset starts.\n/// @custom:member splitGroups An array of splits to use for any number of groups while the ruleset is active.\n/// @custom:member fundAccessLimitGroups An array of structs which dictate the amount of funds a project can access from\n/// its balance in each payment terminal while the ruleset is active. Amounts are fixed point numbers using the same\n/// number of decimals as the corresponding terminal. The `_payoutLimit` and `_surplusAllowance` parameters must fit in\n/// a `uint232`.\nstruct JBRulesetConfig {\n    uint256 mustStartAtOrAfter;\n    uint256 duration;\n    uint256 weight;\n    uint256 decayRate;\n    IJBRulesetApprovalHook approvalHook;\n    JBRulesetMetadata metadata;\n    JBSplitGroup[] splitGroups;\n    JBFundAccessLimitGroup[] fundAccessLimitGroups;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBRulesetMetadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @custom:member reservedRate The reserved rate of the ruleset. This number is a percentage calculated out of\n/// `JBConstants.MAX_RESERVED_RATE`.\n/// @custom:member redemptionRate The redemption rate of the ruleset. This number is a percentage calculated out of\n/// `JBConstants.MAX_REDEMPTION_RATE`.\n/// @custom:member baseCurrency The currency on which to base the ruleset's weight.\n/// @custom:member pausePay A flag indicating if the pay functionality should be paused during the ruleset.\n/// @custom:member pauseCreditTransfers A flag indicating if the project token transfer functionality should be paused\n/// during the funding cycle.\n/// @custom:member allowOwnerMinting A flag indicating if the project owner or an operator with the `MINT_TOKENS`\n/// permission from the owner should be allowed to mint project tokens on demand during this ruleset.\n/// @custom:member allowTerminalMigration A flag indicating if migrating terminals should be allowed during this\n/// ruleset.\n/// @custom:member allowSetTerminals A flag indicating if a project's terminals can be added or removed.\n/// @custom:member allowControllerMigration A flag indicating if migrating controllers should be allowed during this\n/// ruleset.\n/// @custom:member allowSetController A flag indicating if a project's controller can be changed.\n/// @custom:member holdFees A flag indicating if fees should be held during this ruleset.\n/// @custom:member useTotalSurplusForRedemptions A flag indicating if redemptions should use the project's balance held\n/// in all terminals instead of the project's local terminal balance from which the redemption is being fulfilled.\n/// @custom:member useDataHookForPay A flag indicating if the data hook should be used for pay transactions during this\n/// ruleset.\n/// @custom:member useDataHookForRedeem A flag indicating if the data hook should be used for redeem transactions during\n/// this ruleset.\n/// @custom:member dataHook The data hook to use during this ruleset.\n/// @custom:member metadata Metadata of the metadata, up to uint8 in size.\nstruct JBRulesetMetadata {\n    uint256 reservedRate;\n    uint256 redemptionRate;\n    uint256 baseCurrency;\n    bool pausePay;\n    bool pauseCreditTransfers;\n    bool allowOwnerMinting;\n    bool allowTerminalMigration;\n    bool allowSetTerminals;\n    bool allowControllerMigration;\n    bool allowSetController;\n    bool holdFees;\n    bool useTotalSurplusForRedemptions;\n    bool useDataHookForPay;\n    bool useDataHookForRedeem;\n    address dataHook;\n    uint256 metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBRulesetWithMetadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBRuleset} from \"./JBRuleset.sol\";\nimport {JBRulesetMetadata} from \"./JBRulesetMetadata.sol\";\n\n/// @custom:member ruleset The ruleset.\n/// @custom:member metadata The ruleset's metadata.\nstruct JBRulesetWithMetadata {\n    JBRuleset ruleset;\n    JBRulesetMetadata metadata;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBSplit.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBSplitHook} from \"./../interfaces/IJBSplitHook.sol\";\n\n/// @notice Splits are used to send a percentage of a total token amount to a specific contract, project, or address.\n/// Splits are used to send payouts and reserved tokens.\n/// @dev 1. If a non-zero split hook contract is specified, this split's tokens are sent there along with this split's\n/// properties.\n/// @dev 2. Otherwise, if a non-zero project ID is specified, this split's tokens are used to `pay` it through its\n/// terminal if possible, or sent to the project's owner if not. If this payment yields tokens, those go to the split's\n/// `beneficiary`.\n/// @dev 3. Otherwise, this split's tokens are sent directly to the `beneficiary`.\n/// @dev To summarize, this split's tokens are sent according to the following priority: `split hook` > `projectId` >\n/// `beneficiary`.\n/// @custom:member preferAddToBalance If this split were to `pay` a project through its terminal, this flag indicates\n/// whether it should prefer using the terminal's `addToBalance` function instead.\n/// @custom:member percent The percent of the total token amount that this split sends. This number is out of\n/// `JBConstants.SPLITS_TOTAL_PERCENT`.\n/// @custom:member projectId The ID of a project to `pay`, if applicable. Resulting tokens will be routed to the\n/// `beneficiary`.\n/// @custom:member beneficiary Receives this split's tokens if the `hook` and `projectId` are zero. If the `projectId`\n/// is specified, the `beneficiary` receives any project tokens minted by this split.\n/// @custom:member lockedUntil The split cannot be changed until this timestamp. The `lockedUntil` timestamp can be\n/// increased while a split is locked. If `lockedUntil` is zero, this split can be changed at any time.\n/// @custom:member hook A contract which will receive this split's tokens and properties, and can define custom\n/// behavior.\nstruct JBSplit {\n    bool preferAddToBalance;\n    uint256 percent;\n    uint256 projectId;\n    address payable beneficiary;\n    uint256 lockedUntil;\n    IJBSplitHook hook;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBSplitGroup.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBSplit} from \"./JBSplit.sol\";\n\n/// @custom:member groupId An identifier for the group.\n/// @custom:member splits The splits in the group.\nstruct JBSplitGroup {\n    uint256 groupId;\n    JBSplit[] splits;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBSplitHookContext.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {JBSplit} from \"./JBSplit.sol\";\n\n/// @custom:member token The token being sent to the split hook.\n/// @custom:member amount The amount being sent to the split hook, as a fixed point number.\n/// @custom:member decimals The number of decimals in the amount.\n/// @custom:member projectId The project the split belongs to.\n/// @custom:member groupId The group the split belongs to.\n/// @custom:member split The split which specified the hook.\nstruct JBSplitHookContext {\n    address token;\n    uint256 amount;\n    uint256 decimals;\n    uint256 projectId;\n    uint256 groupId;\n    JBSplit split;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBTerminalConfig.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IJBTerminal} from \"./../interfaces/terminal/IJBTerminal.sol\";\n\n/// @custom:member terminal The terminal to configure.\n/// @custom:member acceptedTokens The tokens to accept from the terminal.\nstruct JBTerminalConfig {\n    IJBTerminal terminal;\n    address[] tokensToAccept;\n}\n"
			},
			"node_modules/@bananapus/core/src/structs/JBTokenAmount.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @custom:member token The token the payment was made in.\n/// @custom:member value The amount of tokens that was paid, as a fixed point number.\n/// @custom:member decimals The number of decimals included in the value fixed point number.\n/// @custom:member currency The expected currency of the value.\nstruct JBTokenAmount {\n    address token;\n    uint256 value;\n    uint256 decimals;\n    uint256 currency;\n}\n"
			},
			"node_modules/@bananapus/permission-ids/src/JBPermissionIds.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\n/// @notice Permission IDs for `JBPermissions`, used throughout the Bananapus ecosystem.\nlibrary JBPermissionIds {\n    // nana-core\n    uint256 internal constant ROOT = 1;\n    uint256 internal constant QUEUE_RULESETS = 2;\n    uint256 internal constant REDEEM_TOKENS = 3;\n    uint256 internal constant MIGRATE_CONTROLLER = 4;\n    uint256 internal constant MIGRATE_TERMINAL = 5;\n    uint256 internal constant PROCESS_FEES = 6;\n    uint256 internal constant SET_PROJECT_METADATA = 7;\n    uint256 internal constant ISSUE_TOKEN = 8;\n    uint256 internal constant SET_TOKEN = 9;\n    uint256 internal constant MINT_TOKENS = 10;\n    uint256 internal constant BURN_TOKENS = 11;\n    uint256 internal constant CLAIM_TOKENS = 12;\n    uint256 internal constant TRANSFER_TOKENS = 13;\n    uint256 internal constant SET_CONTROLLER = 14;\n    uint256 internal constant SET_TERMINALS = 15;\n    uint256 internal constant SET_PRIMARY_TERMINAL = 16;\n    uint256 internal constant USE_ALLOWANCE = 17;\n    uint256 internal constant SET_SPLITS = 18;\n    uint256 internal constant ADD_PRICE_FEED = 19;\n    uint256 internal constant SET_ACCOUNTING_CONTEXT = 20;\n    // nana-project-handles\n    uint256 internal constant SET_ENS_NAME_FOR = 21;\n    // nana-721-hook\n    uint256 internal constant ADJUST_721_TIERS = 22;\n    uint256 internal constant UPDATE_721_METADATA = 23;\n    uint256 internal constant MINT_721 = 24;\n    // nana-buyback-hook\n    uint256 internal constant SET_BUYBACK_POOL_PARAMS = 25;\n    uint256 internal constant CHANGE_BUYBACK_POOL = 26;\n    // nana-swap-terminal\n    uint256 internal constant MODIFY_DEFAULT_SWAP_TERMINAL_POOL = 27;\n    uint256 internal constant MODIFY_SWAP_TERMINAL_TWAP_PARAMS = 28;\n    // nana-suckers\n    uint256 internal constant MAP_SUCKER_TOKEN = 29;\n    uint256 internal constant DEPLOY_SUCKERS = 30;\n}\n"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/Create2.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Create2.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Not enough balance for performing a CREATE2 deploy.\n     */\n    error Create2InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev There's no code to deploy.\n     */\n    error Create2EmptyBytecode();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error Create2FailedDeployment();\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        if (address(this).balance < amount) {\n            revert Create2InsufficientBalance(address(this).balance, amount);\n        }\n        if (bytecode.length == 0) {\n            revert Create2EmptyBytecode();\n        }\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        if (addr == address(0)) {\n            revert Create2FailedDeployment();\n        }\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"node_modules/@openzeppelin/contracts/utils/structs/BitMaps.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, provided the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n *\n * BitMaps pack 256 booleans across each bit of a single 256-bit slot of `uint256` type.\n * Hence booleans corresponding to 256 _sequential_ indices would only consume a single slot,\n * unlike the regular `bool` which would consume an entire slot for a single value.\n *\n * This results in gas savings in two ways:\n *\n * - Setting a zero value to non-zero only once every 256 times\n * - Accessing the same warm slot for every 256 _sequential_ indices\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 bucket => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(BitMap storage bitmap, uint256 index, bool value) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
			},
			"node_modules/@prb/math/src/Common.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.19;\n\n// Common.sol\n//\n// Common mathematical functions used in both SD59x18 and UD60x18. Note that these global functions do not\n// always operate with SD59x18 and UD60x18 numbers.\n\n/*//////////////////////////////////////////////////////////////////////////\n                                CUSTOM ERRORS\n//////////////////////////////////////////////////////////////////////////*/\n\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\n\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\n\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\nerror PRBMath_MulDivSigned_InputTooSmall();\n\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\n\n/*//////////////////////////////////////////////////////////////////////////\n                                    CONSTANTS\n//////////////////////////////////////////////////////////////////////////*/\n\n/// @dev The maximum value a uint128 number can have.\nuint128 constant MAX_UINT128 = type(uint128).max;\n\n/// @dev The maximum value a uint40 number can have.\nuint40 constant MAX_UINT40 = type(uint40).max;\n\n/// @dev The unit number, which the decimal precision of the fixed-point types.\nuint256 constant UNIT = 1e18;\n\n/// @dev The unit number inverted mod 2^256.\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\n\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\n/// bit in the binary representation of `UNIT`.\nuint256 constant UNIT_LPOTD = 262144;\n\n/*//////////////////////////////////////////////////////////////////////////\n                                    FUNCTIONS\n//////////////////////////////////////////////////////////////////////////*/\n\n/// @notice Calculates the binary exponent of x using the binary fraction method.\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\n/// @custom:smtchecker abstract-function-nondet\nfunction exp2(uint256 x) pure returns (uint256 result) {\n    unchecked {\n        // Start from 0.5 in the 192.64-bit fixed-point format.\n        result = 0x800000000000000000000000000000000000000000000000;\n\n        // The following logic multiplies the result by $\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\n        //\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\n        // we know that `x & 0xFF` is also 1.\n        if (x & 0xFF00000000000000 > 0) {\n            if (x & 0x8000000000000000 > 0) {\n                result = (result * 0x16A09E667F3BCC909) >> 64;\n            }\n            if (x & 0x4000000000000000 > 0) {\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\n            }\n            if (x & 0x2000000000000000 > 0) {\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\n            }\n            if (x & 0x1000000000000000 > 0) {\n                result = (result * 0x10B5586CF9890F62A) >> 64;\n            }\n            if (x & 0x800000000000000 > 0) {\n                result = (result * 0x1059B0D31585743AE) >> 64;\n            }\n            if (x & 0x400000000000000 > 0) {\n                result = (result * 0x102C9A3E778060EE7) >> 64;\n            }\n            if (x & 0x200000000000000 > 0) {\n                result = (result * 0x10163DA9FB33356D8) >> 64;\n            }\n            if (x & 0x100000000000000 > 0) {\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\n            }\n        }\n\n        if (x & 0xFF000000000000 > 0) {\n            if (x & 0x80000000000000 > 0) {\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\n            }\n            if (x & 0x40000000000000 > 0) {\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\n            }\n            if (x & 0x20000000000000 > 0) {\n                result = (result * 0x100162F3904051FA1) >> 64;\n            }\n            if (x & 0x10000000000000 > 0) {\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\n            }\n            if (x & 0x8000000000000 > 0) {\n                result = (result * 0x100058BA01FB9F96D) >> 64;\n            }\n            if (x & 0x4000000000000 > 0) {\n                result = (result * 0x10002C5CC37DA9492) >> 64;\n            }\n            if (x & 0x2000000000000 > 0) {\n                result = (result * 0x1000162E525EE0547) >> 64;\n            }\n            if (x & 0x1000000000000 > 0) {\n                result = (result * 0x10000B17255775C04) >> 64;\n            }\n        }\n\n        if (x & 0xFF0000000000 > 0) {\n            if (x & 0x800000000000 > 0) {\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\n            }\n            if (x & 0x400000000000 > 0) {\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\n            }\n            if (x & 0x200000000000 > 0) {\n                result = (result * 0x10000162E43F4F831) >> 64;\n            }\n            if (x & 0x100000000000 > 0) {\n                result = (result * 0x100000B1721BCFC9A) >> 64;\n            }\n            if (x & 0x80000000000 > 0) {\n                result = (result * 0x10000058B90CF1E6E) >> 64;\n            }\n            if (x & 0x40000000000 > 0) {\n                result = (result * 0x1000002C5C863B73F) >> 64;\n            }\n            if (x & 0x20000000000 > 0) {\n                result = (result * 0x100000162E430E5A2) >> 64;\n            }\n            if (x & 0x10000000000 > 0) {\n                result = (result * 0x1000000B172183551) >> 64;\n            }\n        }\n\n        if (x & 0xFF00000000 > 0) {\n            if (x & 0x8000000000 > 0) {\n                result = (result * 0x100000058B90C0B49) >> 64;\n            }\n            if (x & 0x4000000000 > 0) {\n                result = (result * 0x10000002C5C8601CC) >> 64;\n            }\n            if (x & 0x2000000000 > 0) {\n                result = (result * 0x1000000162E42FFF0) >> 64;\n            }\n            if (x & 0x1000000000 > 0) {\n                result = (result * 0x10000000B17217FBB) >> 64;\n            }\n            if (x & 0x800000000 > 0) {\n                result = (result * 0x1000000058B90BFCE) >> 64;\n            }\n            if (x & 0x400000000 > 0) {\n                result = (result * 0x100000002C5C85FE3) >> 64;\n            }\n            if (x & 0x200000000 > 0) {\n                result = (result * 0x10000000162E42FF1) >> 64;\n            }\n            if (x & 0x100000000 > 0) {\n                result = (result * 0x100000000B17217F8) >> 64;\n            }\n        }\n\n        if (x & 0xFF000000 > 0) {\n            if (x & 0x80000000 > 0) {\n                result = (result * 0x10000000058B90BFC) >> 64;\n            }\n            if (x & 0x40000000 > 0) {\n                result = (result * 0x1000000002C5C85FE) >> 64;\n            }\n            if (x & 0x20000000 > 0) {\n                result = (result * 0x100000000162E42FF) >> 64;\n            }\n            if (x & 0x10000000 > 0) {\n                result = (result * 0x1000000000B17217F) >> 64;\n            }\n            if (x & 0x8000000 > 0) {\n                result = (result * 0x100000000058B90C0) >> 64;\n            }\n            if (x & 0x4000000 > 0) {\n                result = (result * 0x10000000002C5C860) >> 64;\n            }\n            if (x & 0x2000000 > 0) {\n                result = (result * 0x1000000000162E430) >> 64;\n            }\n            if (x & 0x1000000 > 0) {\n                result = (result * 0x10000000000B17218) >> 64;\n            }\n        }\n\n        if (x & 0xFF0000 > 0) {\n            if (x & 0x800000 > 0) {\n                result = (result * 0x1000000000058B90C) >> 64;\n            }\n            if (x & 0x400000 > 0) {\n                result = (result * 0x100000000002C5C86) >> 64;\n            }\n            if (x & 0x200000 > 0) {\n                result = (result * 0x10000000000162E43) >> 64;\n            }\n            if (x & 0x100000 > 0) {\n                result = (result * 0x100000000000B1721) >> 64;\n            }\n            if (x & 0x80000 > 0) {\n                result = (result * 0x10000000000058B91) >> 64;\n            }\n            if (x & 0x40000 > 0) {\n                result = (result * 0x1000000000002C5C8) >> 64;\n            }\n            if (x & 0x20000 > 0) {\n                result = (result * 0x100000000000162E4) >> 64;\n            }\n            if (x & 0x10000 > 0) {\n                result = (result * 0x1000000000000B172) >> 64;\n            }\n        }\n\n        if (x & 0xFF00 > 0) {\n            if (x & 0x8000 > 0) {\n                result = (result * 0x100000000000058B9) >> 64;\n            }\n            if (x & 0x4000 > 0) {\n                result = (result * 0x10000000000002C5D) >> 64;\n            }\n            if (x & 0x2000 > 0) {\n                result = (result * 0x1000000000000162E) >> 64;\n            }\n            if (x & 0x1000 > 0) {\n                result = (result * 0x10000000000000B17) >> 64;\n            }\n            if (x & 0x800 > 0) {\n                result = (result * 0x1000000000000058C) >> 64;\n            }\n            if (x & 0x400 > 0) {\n                result = (result * 0x100000000000002C6) >> 64;\n            }\n            if (x & 0x200 > 0) {\n                result = (result * 0x10000000000000163) >> 64;\n            }\n            if (x & 0x100 > 0) {\n                result = (result * 0x100000000000000B1) >> 64;\n            }\n        }\n\n        if (x & 0xFF > 0) {\n            if (x & 0x80 > 0) {\n                result = (result * 0x10000000000000059) >> 64;\n            }\n            if (x & 0x40 > 0) {\n                result = (result * 0x1000000000000002C) >> 64;\n            }\n            if (x & 0x20 > 0) {\n                result = (result * 0x10000000000000016) >> 64;\n            }\n            if (x & 0x10 > 0) {\n                result = (result * 0x1000000000000000B) >> 64;\n            }\n            if (x & 0x8 > 0) {\n                result = (result * 0x10000000000000006) >> 64;\n            }\n            if (x & 0x4 > 0) {\n                result = (result * 0x10000000000000003) >> 64;\n            }\n            if (x & 0x2 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n            if (x & 0x1 > 0) {\n                result = (result * 0x10000000000000001) >> 64;\n            }\n        }\n\n        // In the code snippet below, two operations are executed simultaneously:\n        //\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\n        //\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\n        // integer part, $2^n$.\n        result *= UNIT;\n        result >>= (191 - (x >> 64));\n    }\n}\n\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\n///\n/// @dev See the note on \"msb\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\n///\n/// Each step in this implementation is equivalent to this high-level code:\n///\n/// ```solidity\n/// if (x >= 2 ** 128) {\n///     x >>= 128;\n///     result += 128;\n/// }\n/// ```\n///\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\n///\n/// The Yul instructions used below are:\n///\n/// - \"gt\" is \"greater than\"\n/// - \"or\" is the OR bitwise operator\n/// - \"shl\" is \"shift left\"\n/// - \"shr\" is \"shift right\"\n///\n/// @param x The uint256 number for which to find the index of the most significant bit.\n/// @return result The index of the most significant bit as a uint256.\n/// @custom:smtchecker abstract-function-nondet\nfunction msb(uint256 x) pure returns (uint256 result) {\n    // 2^128\n    assembly (\"memory-safe\") {\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^64\n    assembly (\"memory-safe\") {\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^32\n    assembly (\"memory-safe\") {\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^16\n    assembly (\"memory-safe\") {\n        let factor := shl(4, gt(x, 0xFFFF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^8\n    assembly (\"memory-safe\") {\n        let factor := shl(3, gt(x, 0xFF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^4\n    assembly (\"memory-safe\") {\n        let factor := shl(2, gt(x, 0xF))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^2\n    assembly (\"memory-safe\") {\n        let factor := shl(1, gt(x, 0x3))\n        x := shr(factor, x)\n        result := or(result, factor)\n    }\n    // 2^1\n    // No need to shift x any more.\n    assembly (\"memory-safe\") {\n        let factor := gt(x, 0x1)\n        result := or(result, factor)\n    }\n}\n\n/// @notice Calculates x*y÷denominator with 512-bit precision.\n///\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\n///\n/// Notes:\n/// - The result is rounded toward zero.\n///\n/// Requirements:\n/// - The denominator must not be zero.\n/// - The result must fit in uint256.\n///\n/// @param x The multiplicand as a uint256.\n/// @param y The multiplier as a uint256.\n/// @param denominator The divisor as a uint256.\n/// @return result The result as a uint256.\n/// @custom:smtchecker abstract-function-nondet\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\n    // variables such that product = prod1 * 2^256 + prod0.\n    uint256 prod0; // Least significant 256 bits of the product\n    uint256 prod1; // Most significant 256 bits of the product\n    assembly (\"memory-safe\") {\n        let mm := mulmod(x, y, not(0))\n        prod0 := mul(x, y)\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n    }\n\n    // Handle non-overflow cases, 256 by 256 division.\n    if (prod1 == 0) {\n        unchecked {\n            return prod0 / denominator;\n        }\n    }\n\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\n    if (prod1 >= denominator) {\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////\n    // 512 by 256 division\n    ////////////////////////////////////////////////////////////////////////////\n\n    // Make division exact by subtracting the remainder from [prod1 prod0].\n    uint256 remainder;\n    assembly (\"memory-safe\") {\n        // Compute remainder using the mulmod Yul instruction.\n        remainder := mulmod(x, y, denominator)\n\n        // Subtract 256 bit number from 512-bit number.\n        prod1 := sub(prod1, gt(remainder, prod0))\n        prod0 := sub(prod0, remainder)\n    }\n\n    unchecked {\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\n        uint256 lpotdod = denominator & (~denominator + 1);\n        uint256 flippedLpotdod;\n\n        assembly (\"memory-safe\") {\n            // Factor powers of two out of denominator.\n            denominator := div(denominator, lpotdod)\n\n            // Divide [prod1 prod0] by lpotdod.\n            prod0 := div(prod0, lpotdod)\n\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n        }\n\n        // Shift in bits from prod1 into prod0.\n        prod0 |= prod1 * flippedLpotdod;\n\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n        // four bits. That is, denominator * inv = 1 mod 2^4.\n        uint256 inverse = (3 * denominator) ^ 2;\n\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n        // in modular arithmetic, doubling the correct bits in each step.\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inverse;\n    }\n}\n\n/// @notice Calculates x*y÷1e18 with 512-bit precision.\n///\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\n///\n/// Notes:\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\n/// - The result is rounded toward zero.\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\n///\n/// $$\n/// \\begin{cases}\n///     x * y = MAX\\_UINT256 * UNIT \\\\\n///     (x * y) \\% UNIT \\geq \\frac{UNIT}{2}\n/// \\end{cases}\n/// $$\n///\n/// Requirements:\n/// - Refer to the requirements in {mulDiv}.\n/// - The result must fit in uint256.\n///\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\n/// @custom:smtchecker abstract-function-nondet\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\n    uint256 prod0;\n    uint256 prod1;\n    assembly (\"memory-safe\") {\n        let mm := mulmod(x, y, not(0))\n        prod0 := mul(x, y)\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n    }\n\n    if (prod1 == 0) {\n        unchecked {\n            return prod0 / UNIT;\n        }\n    }\n\n    if (prod1 >= UNIT) {\n        revert PRBMath_MulDiv18_Overflow(x, y);\n    }\n\n    uint256 remainder;\n    assembly (\"memory-safe\") {\n        remainder := mulmod(x, y, UNIT)\n        result :=\n            mul(\n                or(\n                    div(sub(prod0, remainder), UNIT_LPOTD),\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\n                ),\n                UNIT_INVERSE\n            )\n    }\n}\n\n/// @notice Calculates x*y÷denominator with 512-bit precision.\n///\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\n///\n/// Notes:\n/// - The result is rounded toward zero.\n///\n/// Requirements:\n/// - Refer to the requirements in {mulDiv}.\n/// - None of the inputs can be `type(int256).min`.\n/// - The result must fit in int256.\n///\n/// @param x The multiplicand as an int256.\n/// @param y The multiplier as an int256.\n/// @param denominator The divisor as an int256.\n/// @return result The result as an int256.\n/// @custom:smtchecker abstract-function-nondet\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\n        revert PRBMath_MulDivSigned_InputTooSmall();\n    }\n\n    // Get hold of the absolute values of x, y and the denominator.\n    uint256 xAbs;\n    uint256 yAbs;\n    uint256 dAbs;\n    unchecked {\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\n    }\n\n    // Compute the absolute value of x*y÷denominator. The result must fit in int256.\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\n    if (resultAbs > uint256(type(int256).max)) {\n        revert PRBMath_MulDivSigned_Overflow(x, y);\n    }\n\n    // Get the signs of x, y and the denominator.\n    uint256 sx;\n    uint256 sy;\n    uint256 sd;\n    assembly (\"memory-safe\") {\n        // \"sgt\" is the \"signed greater than\" assembly instruction and \"sub(0,1)\" is -1 in two's complement.\n        sx := sgt(x, sub(0, 1))\n        sy := sgt(y, sub(0, 1))\n        sd := sgt(denominator, sub(0, 1))\n    }\n\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\n    // If there are, the result should be negative. Otherwise, it should be positive.\n    unchecked {\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\n    }\n}\n\n/// @notice Calculates the square root of x using the Babylonian method.\n///\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\n///\n/// Notes:\n/// - If x is not a perfect square, the result is rounded down.\n/// - Credits to OpenZeppelin for the explanations in comments below.\n///\n/// @param x The uint256 number for which to calculate the square root.\n/// @return result The result as a uint256.\n/// @custom:smtchecker abstract-function-nondet\nfunction sqrt(uint256 x) pure returns (uint256 result) {\n    if (x == 0) {\n        return 0;\n    }\n\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\n    //\n    // We know that the \"msb\" (most significant bit) of x is a power of 2 such that we have:\n    //\n    // $$\n    // msb(x) <= x <= 2*msb(x)$\n    // $$\n    //\n    // We write $msb(x)$ as $2^k$, and we get:\n    //\n    // $$\n    // k = log_2(x)\n    // $$\n    //\n    // Thus, we can write the initial inequality as:\n    //\n    // $$\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\n    // $$\n    //\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\n    uint256 xAux = uint256(x);\n    result = 1;\n    if (xAux >= 2 ** 128) {\n        xAux >>= 128;\n        result <<= 64;\n    }\n    if (xAux >= 2 ** 64) {\n        xAux >>= 64;\n        result <<= 32;\n    }\n    if (xAux >= 2 ** 32) {\n        xAux >>= 32;\n        result <<= 16;\n    }\n    if (xAux >= 2 ** 16) {\n        xAux >>= 16;\n        result <<= 8;\n    }\n    if (xAux >= 2 ** 8) {\n        xAux >>= 8;\n        result <<= 4;\n    }\n    if (xAux >= 2 ** 4) {\n        xAux >>= 4;\n        result <<= 2;\n    }\n    if (xAux >= 2 ** 2) {\n        result <<= 1;\n    }\n\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\n    // precision into the expected uint128 result.\n    unchecked {\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n        result = (result + x / result) >> 1;\n\n        // If x is not a perfect square, round the result toward zero.\n        uint256 roundedResult = x / result;\n        if (result >= roundedResult) {\n            result = roundedResult;\n        }\n    }\n}\n"
			},
			"src/BPOptimismSucker.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IJBPrices} from \"@bananapus/core/src/interfaces/IJBPrices.sol\";\nimport {IJBRulesets} from \"@bananapus/core/src/interfaces/IJBRulesets.sol\";\nimport {IJBDirectory} from \"@bananapus/core/src/interfaces/IJBDirectory.sol\";\nimport {IJBTokens} from \"@bananapus/core/src/interfaces/IJBTokens.sol\";\nimport {IJBPermissions} from \"@bananapus/core/src/interfaces/IJBPermissions.sol\";\nimport {JBConstants} from \"@bananapus/core/src/libraries/JBConstants.sol\";\n\nimport {BPSucker} from \"./BPSucker.sol\";\nimport {BPSuckerHook} from \"./BPSuckerHook.sol\";\nimport {BPMessageRoot} from \"./structs/BPMessageRoot.sol\";\nimport {BPRemoteToken} from \"./structs/BPRemoteToken.sol\";\nimport {BPInboxTreeRoot} from \"./structs/BPInboxTreeRoot.sol\";\nimport {BPOptimismSuckerDeployer} from \"./deployers/BPOptimismSuckerDeployer.sol\";\nimport {OPMessenger} from \"./interfaces/OPMessenger.sol\";\nimport {OPStandardBridge} from \"./interfaces/OPStandardBridge.sol\";\nimport {MerkleLib} from \"./utils/MerkleLib.sol\";\n\n/// @notice A `BPSucker` implementation to suck tokens between two chains connected by an OP Bridge.\ncontract BPOptimismSucker is BPSucker, BPSuckerHook {\n    using MerkleLib for MerkleLib.Tree;\n    using BitMaps for BitMaps.BitMap;\n\n    event SuckingToRemote(address token, uint64 nonce);\n\n    //*********************************************************************//\n    // --------------- public immutable stored properties ---------------- //\n    //*********************************************************************//\n\n    /// @notice The messenger used to send messages between the local and remote sucker.\n    OPMessenger public immutable OPMESSENGER;\n\n    /// @notice The bridge used to bridge tokens between the local and remote chain.\n    OPStandardBridge public immutable OPBRIDGE;\n\n    //*********************************************************************//\n    // ---------------------------- constructor -------------------------- //\n    //*********************************************************************//\n\n    constructor(\n        IJBPrices prices,\n        IJBRulesets rulesets,\n        IJBDirectory directory,\n        IJBTokens tokens,\n        IJBPermissions permissions,\n        address peer,\n        uint256 projectId\n    ) BPSucker(directory, tokens, permissions, peer, projectId) BPSuckerHook(prices, rulesets) {\n        // Fetch the messenger and bridge by doing a callback to the deployer contract.\n        OPMESSENGER = BPOptimismSuckerDeployer(msg.sender).MESSENGER();\n        OPBRIDGE = BPOptimismSuckerDeployer(msg.sender).BRIDGE();\n    }\n\n    //*********************************************************************//\n    // --------------------- internal transactions ----------------------- //\n    //*********************************************************************//\n\n    /// @notice Use the `OPMESSENGER` to send the outbox tree for the `token` and the corresponding funds to the peer over the `OPBRIDGE`.\n    /// @param transportPayment the amount of `msg.value` that is going to get paid for sending this message.\n    /// @param token The token to bridge the outbox tree for.\n    /// @param remoteToken Information about the remote token being bridged to.\n    function _sendRoot(uint256 transportPayment, address token, BPRemoteToken memory remoteToken) internal override {\n        uint256 nativeValue;\n\n        // Revert if there's a `msg.value`. The OP bridge does not expect to be paid.\n        if (transportPayment != 0) {\n            revert UNEXPECTED_MSG_VALUE();\n        }\n\n        // Get the amount to send and then clear it from the outbox tree.\n        uint256 amount = outbox[token].balance;\n        delete outbox[token].balance;\n\n        // Increment the outbox tree's nonce.\n        uint64 nonce = ++outbox[token].nonce;\n\n        // Ensure the token is mapped to an address on the remote chain.\n        if (remoteToken.addr == address(0)) {\n            revert TOKEN_NOT_MAPPED(token);\n        }\n\n        // If the token is an ERC20, bridge it to the peer.\n        if (token != JBConstants.NATIVE_TOKEN) {\n            // Approve the tokens bing bridged.\n            SafeERC20.forceApprove(IERC20(token), address(OPBRIDGE), amount);\n\n            // Bridge the tokens to the peer sucker.\n            OPBRIDGE.bridgeERC20To({\n                localToken: token,\n                remoteToken: remoteToken.addr,\n                to: PEER,\n                amount: amount,\n                minGasLimit: remoteToken.minGas,\n                extraData: bytes(\"\")\n            });\n        } else {\n            // Otherwise, the token is the native token, and the amount will be sent as `msg.value`.\n            nativeValue = amount;\n        }\n\n        bytes32 _root = outbox[token].tree.root();\n        uint256 _index = outbox[token].tree.count - 1;\n\n        // Send the message to the peer with the redeemed ETH.\n        // slither-disable-next-line arbitrary-send-eth\n        OPMESSENGER.sendMessage{value: nativeValue}(\n            PEER,\n            abi.encodeCall(\n                BPSucker.fromRemote,\n                (\n                    BPMessageRoot({\n                        token: remoteToken.addr,\n                        amount: amount,\n                        remoteRoot: BPInboxTreeRoot({nonce: nonce, root: _root})\n                    })\n                )\n            ),\n            MESSENGER_BASE_GAS_LIMIT\n        );\n\n        // Emit an event for the relayers to watch for.\n        emit RootToRemote(_root, token, _index, nonce);\n    }\n\n    /// @notice Checks if the `sender` (`msg.sender`) is a valid representative of the remote peer.\n    /// @param sender The message's sender.\n    function _isRemotePeer(address sender) internal override returns (bool valid) {\n        return sender == address(OPMESSENGER) && OPMESSENGER.xDomainMessageSender() == PEER;\n    }\n}\n"
			},
			"src/BPSucker.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {IBPSucker} from \"./interfaces/IBPSucker.sol\";\nimport {IJBDirectory} from \"@bananapus/core/src/interfaces/IJBDirectory.sol\";\nimport {IJBController} from \"@bananapus/core/src/interfaces/IJBController.sol\";\nimport {IJBTokens} from \"@bananapus/core/src/interfaces/IJBTokens.sol\";\nimport {IJBTerminal} from \"@bananapus/core/src/interfaces/terminal/IJBTerminal.sol\";\nimport {IJBRedeemTerminal} from \"@bananapus/core/src/interfaces/terminal/IJBRedeemTerminal.sol\";\nimport {JBAccountingContext} from \"@bananapus/core/src/structs/JBAccountingContext.sol\";\nimport {JBConstants} from \"@bananapus/core/src/libraries/JBConstants.sol\";\nimport {JBPermissioned} from \"@bananapus/core/src/abstract/JBPermissioned.sol\";\nimport {IJBPermissions} from \"@bananapus/core/src/interfaces/IJBPermissions.sol\";\nimport {JBPermissionIds} from \"@bananapus/permission-ids/src/JBPermissionIds.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {BitMaps} from \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\n\nimport {BPTokenMapping} from \"./structs/BPTokenMapping.sol\";\nimport {BPRemoteToken} from \"./structs/BPRemoteToken.sol\";\nimport {BPOutboxTree} from \"./structs/BPOutboxTree.sol\";\nimport {BPInboxTreeRoot} from \"./structs/BPInboxTreeRoot.sol\";\nimport {BPMessageRoot} from \"./structs/BPMessageRoot.sol\";\nimport {BPLeaf} from \"./structs/BPLeaf.sol\";\nimport {BPClaim} from \"./structs/BPClaim.sol\";\nimport {BPAddToBalanceMode} from \"./enums/BPAddToBalanceMode.sol\";\nimport {MerkleLib} from \"./utils/MerkleLib.sol\";\n\n/// @notice An abstract contract for bridging a Juicebox project's tokens and the corresponding funds to and from a remote chain.\n/// @dev Beneficiaries and balances are tracked on two merkle trees: the outbox tree is used to send from the local chain to the remote chain, and the inbox tree is used to receive from the remote chain to the local chain.\n/// @dev Throughout this contract, \"terminal token\" refers to any token accepted by a project's terminal.\nabstract contract BPSucker is JBPermissioned, IBPSucker {\n    using MerkleLib for MerkleLib.Tree;\n    using BitMaps for BitMaps.BitMap;\n    using SafeERC20 for IERC20;\n\n    /// @notice The depth of the merkle tree used to track beneficiaries, token balances, and redemption values.\n    uint256 internal constant TREE_DEPTH = 32;\n\n    //*********************************************************************//\n    // --------------------------- custom errors ------------------------- //\n    //*********************************************************************//\n\n    error NOT_PEER();\n    error BELOW_MIN_GAS(uint256 minGas, uint256 suppliedGas);\n    error ERC20_TOKEN_REQUIRED();\n    error BENEFICIARY_NOT_ALLOWED();\n    error NO_TERMINAL_FOR(uint256 projectId, address token);\n    error INVALID_PROOF(bytes32 expectedRoot, bytes32 proofRoot);\n    error INVALID_NATIVE_REMOTE_ADDRESS(address addr);\n    error LEAF_ALREADY_EXECUTED(uint256 index);\n    error QUEUE_INSUFFECIENT_SIZE(uint256 minSize, uint256 currentSize);\n    error INSUFFICIENT_BALANCE();\n    error TOKEN_NOT_MAPPED(address token); // TODO: This needs to be broken out into a few errors.\n    error MANUAL_NOT_ALLOWED();\n    error UNEXPECTED_MSG_VALUE();\n\n    //*********************************************************************//\n    // ---------------------- public stored properties ------------------- //\n    //*********************************************************************//\n\n    /// @notice The outbox merkle tree for a given token.\n    mapping(address token => BPOutboxTree) public outbox;\n\n    /// @notice The inbox merkle tree root for a given token.\n    mapping(address token => BPInboxTreeRoot root) public inbox;\n\n    /// @notice The outstanding amount of tokens to be added to the project's balance by `claim` or `addOutstandingAmountToBalance`.\n    mapping(address token => uint256 amount) public amountToAddToBalance;\n\n    /// @notice Information about the token on the remote chain that the given token on the local chain is mapped to.\n    mapping(address token => BPRemoteToken remoteToken) public remoteTokenFor;\n\n    //*********************************************************************//\n    // --------------- public immutable stored properties ---------------- //\n    //*********************************************************************//\n\n    /// @notice Whether the `amountToAddToBalance` gets added to the project's balance automatically when `claim` is called or manually by calling `addOutstandingAmountToBalance`.\n    BPAddToBalanceMode public immutable ADD_TO_BALANCE_MODE;\n\n    /// @notice The directory of terminals and controllers for projects.\n    IJBDirectory public immutable DIRECTORY;\n\n    /// @notice The contract that manages token minting and burning.\n    IJBTokens public immutable TOKENS;\n\n    /// @notice The address of this contract's deployer.\n    address public immutable DEPLOYER;\n\n    /// @notice The peer sucker on the remote chain.\n    address public immutable PEER;\n\n    /// @notice The ID of the project (on the local chain) that this sucker is associated with.\n    uint256 public immutable PROJECT_ID;\n\n    // TODO: These two constants should be more clearly explained.\n    /// @notice A reasonable minimum gas limit for a basic cross-chain call.\n    uint32 constant MESSENGER_BASE_GAS_LIMIT = 300_000;\n\n    /// @notice A reasonable minimum gas limit used when bridging ERC-20s.\n    uint32 constant MESSENGER_ERC20_MIN_GAS_LIMIT = 200_000;\n\n    //*********************************************************************//\n    // -------------------- internal stored properties ------------------- //\n    //*********************************************************************//\n\n    /// @notice Tracks whether individual leaves in a given token's merkle tree have been executed (to prevent double-spending).\n    /// @dev A leaf is \"executed\" when the tokens it represents are minted for its beneficiary.\n    mapping(address token => BitMaps.BitMap) executed;\n\n    //*********************************************************************//\n    // ---------------------------- constructor -------------------------- //\n    //*********************************************************************//\n    constructor(IJBDirectory directory, IJBTokens tokens, IJBPermissions permissions, address peer, uint256 projectId)\n        JBPermissioned(permissions)\n    {\n        DIRECTORY = directory;\n        TOKENS = tokens;\n        PEER = peer == address(0) ? address(this) : peer;\n        PROJECT_ID = projectId;\n        DEPLOYER = msg.sender;\n\n        // TODO: ADB mode.\n\n        // Sanity check: make sure the merkle lib uses the same tree depth.\n        assert(MerkleLib.TREE_DEPTH == TREE_DEPTH);\n    }\n\n    //*********************************************************************//\n    // --------------------- external transactions ----------------------- //\n    //*********************************************************************//\n\n    /// @notice Prepare project tokens and the redemption amount backing them to be bridged to the remote chain.\n    /// @dev This adds the tokens and funds to the outbox tree for the `token`. They will be bridged by the next call to `toRemote` for the same `token`.\n    /// @param projectTokenAmount The amount of project tokens to prepare for bridging.\n    /// @param beneficiary The address of the recipient of the tokens on the remote chain.\n    /// @param minTokensReclaimed The minimum amount of terminal tokens to redeem for. If the amount reclaimed is less than this, the transaction will revert.\n    /// @param token The address of the terminal token to redeem for.\n    function prepare(uint256 projectTokenAmount, address beneficiary, uint256 minTokensReclaimed, address token)\n        external\n    {\n        // Make sure the beneficiary is not the zero address, as this would revert when minting on the remote chain.\n        if (beneficiary == address(0)) {\n            revert BENEFICIARY_NOT_ALLOWED();\n        }\n\n        // Get the project's token.\n        IERC20 projectToken = IERC20(address(TOKENS.tokenOf(PROJECT_ID)));\n        if (address(projectToken) == address(0)) {\n            revert ERC20_TOKEN_REQUIRED();\n        }\n\n        // Make sure that the token is mapped to a remote token.\n        if (remoteTokenFor[token].addr == address(0)) {\n            revert TOKEN_NOT_MAPPED(token);\n        }\n\n        // Transfer the tokens to this contract.\n        projectToken.safeTransferFrom(msg.sender, address(this), projectTokenAmount);\n\n        // Redeem the tokens.\n        uint256 terminalTokenAmount = _getBackingAssets(projectToken, projectTokenAmount, token, minTokensReclaimed);\n\n        // Insert the item into the outbox tree for the terminal `token`.\n        _insertIntoTree(projectTokenAmount, token, terminalTokenAmount, beneficiary);\n    }\n\n    /// @notice Bridge the project tokens, redeemed funds, and beneficiary information for a given `token` to the remote chain.\n    /// @dev This sends the outbox root for the specified `token` to the remote chain.\n    /// @param token The terminal token being bridged.\n    function toRemote(address token) external payable {\n        // TODO: Add some way to prevent spam.\n        BPRemoteToken memory remoteToken = remoteTokenFor[token];\n\n        // Ensure that the amount being bridged exceeds the minimum bridge amount.\n        if (outbox[token].balance < remoteToken.minBridgeAmount) {\n            revert QUEUE_INSUFFECIENT_SIZE(remoteToken.minBridgeAmount, outbox[token].balance);\n        }\n\n        // Send the merkle root to the remote chain.\n        _sendRoot(msg.value, token, remoteToken);\n    }\n\n    /// @notice Receive a merkle root for a terminal token from the remote project.\n    /// @dev This can only be called by the messenger contract on the local chain, with a message from the remote peer.\n    /// @param root The merkle root, token, and amount being received.\n    function fromRemote(BPMessageRoot calldata root) external payable {\n        // Make sure that the message came from our peer.\n        if (!_isRemotePeer(msg.sender)) {\n            revert NOT_PEER();\n        }\n\n        // Increase the outstanding amount to be added to the project's balance by the amount being received.\n        amountToAddToBalance[root.token] += root.amount;\n\n        // If the received tree's nonce is greater than the current inbox tree's nonce, update the inbox tree.\n        // We can't revert because this could be a native token transfer. If we reverted, we would lose the native tokens.\n        if (root.remoteRoot.nonce > inbox[root.token].nonce) {\n            inbox[root.token] = root.remoteRoot;\n            emit NewInboxTreeRoot(root.token, root.remoteRoot.nonce, root.remoteRoot.root);\n        }\n    }\n\n    /// @notice BPClaim project tokens which have been bridged from the remote chain for their beneficiary.\n    /// @param claimData The terminal token, merkle tree leaf, and proof for the claim.\n    function claim(BPClaim calldata claimData) public {\n        // Attempt to validate the proof against the inbox tree for the terminal token.\n        _validate({\n            projectTokenAmount: claimData.leaf.projectTokenAmount,\n            terminalToken: claimData.token,\n            terminalTokenAmount: claimData.leaf.terminalTokenAmount,\n            beneficiary: claimData.leaf.beneficiary,\n            index: claimData.leaf.index,\n            leaves: claimData.proof\n        });\n\n        // If this contract's add to balance mode is `ON_CLAIM`, add the redeemed funds to the project's balance.\n        if (ADD_TO_BALANCE_MODE == BPAddToBalanceMode.ON_CLAIM) {\n            _addToBalance(claimData.token, claimData.leaf.terminalTokenAmount);\n        }\n\n        // Mint the project tokens for the beneficiary.\n        IJBController(address(DIRECTORY.controllerOf(PROJECT_ID))).mintTokensOf(\n            PROJECT_ID, claimData.leaf.projectTokenAmount, claimData.leaf.beneficiary, \"\", false\n        );\n    }\n\n    /// @notice Performs multiple claims.\n    /// @param claims A list of claims to perform (including the terminal token, merkle tree leaf, and proof for each claim).\n    function claim(BPClaim[] calldata claims) external {\n        for (uint256 i = 0; i < claims.length; i++) {\n            claim(claims[i]);\n        }\n    }\n\n    /// @notice Adds the redeemed `token` balance to the projects terminal. Can only be used if `ADD_TO_BALANCE_MODE` is `MANUAL`.\n    /// @param token The address of the terminal token to add to the project's balance.\n    function addOutstandingAmountToBalance(address token) external {\n        if (ADD_TO_BALANCE_MODE != BPAddToBalanceMode.MANUAL) {\n            revert MANUAL_NOT_ALLOWED();\n        }\n\n        // Add entire outstanding amount to the project's balance.\n        _addToBalance(token, amountToAddToBalance[token]);\n    }\n\n    /// @notice Map an ERC-20 token on the local chain to an ERC-20 token on the remote chain, allowing that token to be bridged.\n    /// @param map The local and remote terminal token addresses to map, and minimum amount/gas limits for bridging them.\n    function mapToken(BPTokenMapping calldata map) public {\n        address token = map.localToken;\n        bool isNative = map.localToken == JBConstants.NATIVE_TOKEN;\n\n        // If the token being mapped is the native token, the `remoteToken` must also be the native token.\n        // The native token can also be mapped to the 0 address, which is used to disable native token bridging.\n        if (isNative && map.remoteToken != JBConstants.NATIVE_TOKEN && map.remoteToken != address(0)) {\n            revert INVALID_NATIVE_REMOTE_ADDRESS(map.remoteToken);\n        }\n\n        // Enforce a reasonable minimum gas limit for bridging. A minimum which is too low could lead to the loss of funds.\n        if (map.minGas < MESSENGER_ERC20_MIN_GAS_LIMIT && !isNative) {\n            revert BELOW_MIN_GAS(MESSENGER_ERC20_MIN_GAS_LIMIT, map.minGas);\n        }\n\n        // The caller must be the project owner or have the `QUEUE_RULESETS` permission from them.\n        _requirePermissionFrom(DIRECTORY.PROJECTS().ownerOf(PROJECT_ID), PROJECT_ID, JBPermissionIds.MAP_SUCKER_TOKEN);\n\n        // If the remote token is being set to the 0 address (which disables bridging), send any remaining outbox funds to the remote chain.\n        if (map.remoteToken == address(0) && outbox[token].balance != 0) _sendRoot(0, token, remoteTokenFor[token]);\n\n        // Update the token mapping.\n        remoteTokenFor[token] =\n            BPRemoteToken({minGas: map.minGas, addr: map.remoteToken, minBridgeAmount: map.minBridgeAmount});\n    }\n\n    /// @notice Map multiple ERC-20 tokens on the local chain to ERC-20 tokens on the remote chain, allowing those tokens to be bridged.\n    /// @param maps A list of local and remote terminal token addresses to map, and minimum amount/gas limits for bridging them.\n    function mapTokens(BPTokenMapping[] calldata maps) external {\n        for (uint256 i = 0; i < maps.length; i++) {\n            mapToken(maps[i]);\n        }\n    }\n\n    /// @notice Used to receive redeemed native tokens.\n    receive() external payable {}\n\n    //*********************************************************************//\n    // ------------------------ external views --------------------------- //\n    //*********************************************************************//\n\n    /// @notice Checks whether the specified token is mapped to a remote token.\n    /// @param token The terminal token to check.\n    /// @return A boolean which is `true` if the token is mapped to a remote token and `false` if it is not.\n    function isMapped(address token) external view override returns (bool) {\n        return remoteTokenFor[token].addr != address(0);\n    }\n\n    //*********************************************************************//\n    // --------------------- internal transactions ----------------------- //\n    //*********************************************************************//\n\n    /// @notice Inserts a new leaf into the outbox merkle tree for the specified `token`.\n    /// @param projectTokenAmount The amount of project tokens being redeemed.\n    /// @param token The terminal token being redeemed for.\n    /// @param terminalTokenAmount The amount of terminal tokens reclaimed by redeeming.\n    /// @param beneficiary The beneficiary of the project tokens on the remote chain.\n    function _insertIntoTree(\n        uint256 projectTokenAmount,\n        address token,\n        uint256 terminalTokenAmount,\n        address beneficiary\n    ) internal {\n        // Build a hash based on the token amounts and the beneficiary.\n        bytes32 hash = _buildTreeHash(projectTokenAmount, terminalTokenAmount, beneficiary);\n\n        // Create a new tree based on the outbox tree for the terminal token with the hash inserted.\n        MerkleLib.Tree memory tree = outbox[token].tree.insert(hash);\n\n        // Update the outbox tree and balance for the terminal token.\n        outbox[token].tree = tree;\n        outbox[token].balance += terminalTokenAmount;\n\n        emit InsertToOutboxTree(\n            beneficiary,\n            token,\n            hash,\n            tree.count - 1, // Subtract 1 since we want the 0-based index.\n            outbox[token].tree.root(),\n            projectTokenAmount,\n            terminalTokenAmount\n        );\n    }\n\n    /// @notice Send the outbox root for the specified token to the remote peer.\n    /// @dev The call may have a `transportPayment` for bridging native tokens. Require it to be `0` if it is not needed. Make sure if a value being paid to the bridge is expected to revert if the given value is `0`.\n    /// @param transportPayment the amount of `msg.value` that is going to get paid for sending this message. (usually derived from `msg.value`)\n    /// @param token The terminal token to bridge the merkle tree of.\n    /// @param remoteToken The remote token which the `token` is mapped to.\n    function _sendRoot(uint256 transportPayment, address token, BPRemoteToken memory remoteToken) internal virtual;\n\n    /// @notice Checks if the `sender` (`msg.sender`) is a valid representative of the remote peer.\n    /// @param sender The message's sender.\n    function _isRemotePeer(address sender) internal virtual returns (bool valid);\n\n    /// @notice Validates a leaf as being in the inbox merkle tree and registers the leaf as executed (to prevent double-spending).\n    /// @dev Reverts if the leaf is invalid.\n    /// @param projectTokenAmount The amount of project tokens which were redeemed.\n    /// @param terminalToken The terminal token that the project tokens were redeemed for.\n    /// @param terminalTokenAmount The amount of terminal tokens reclaimed by the redemption.\n    /// @param beneficiary The beneficiary which will receive the project tokens.\n    /// @param index The index of the leaf being proved in the terminal token's inbox tree.\n    /// @param leaves The leaves that prove that the leaf at the `index` is in the tree (i.e. the merkle branch that the leaf is on).\n    function _validate(\n        uint256 projectTokenAmount,\n        address terminalToken,\n        uint256 terminalTokenAmount,\n        address beneficiary,\n        uint256 index,\n        bytes32[TREE_DEPTH] calldata leaves\n    ) internal {\n        // Make sure the leaf has not already been executed.\n        if (executed[terminalToken].get(index)) {\n            revert LEAF_ALREADY_EXECUTED(index);\n        }\n\n        // Register the leaf as executed to prevent double-spending.\n        executed[terminalToken].set(index);\n\n        // Calculate the root based on the leaf, the branch, and the index.\n        bytes32 root = MerkleLib.branchRoot({\n            _item: _buildTreeHash(projectTokenAmount, terminalTokenAmount, beneficiary),\n            _branch: leaves,\n            _index: index\n        });\n\n        // Compare the calculated root to the terminal token's inbox root. Revert if they do not match.\n        if (root != inbox[terminalToken].root) {\n            revert INVALID_PROOF(inbox[terminalToken].root, root);\n        }\n    }\n\n    /// @notice Adds funds to the projects balance.\n    /// @param token The terminal token to add to the project's balance.\n    /// @param amount The amount of terminal tokens to add to the project's balance.\n    function _addToBalance(address token, uint256 amount) internal {\n        // Make sure that the current `amountToAddToBalance` is greater than or equal to the amount being added.\n        uint256 addableAmount = amountToAddToBalance[token];\n        if (amount > addableAmount) {\n            revert INSUFFICIENT_BALANCE();\n        }\n\n        // Update the outstanding amount of tokens which can be added to the project's balance.\n        amountToAddToBalance[token] = addableAmount - amount;\n\n        // Get the project's primary terminal for the token.\n        IJBTerminal terminal = DIRECTORY.primaryTerminalOf(PROJECT_ID, token);\n        if (address(terminal) == address(0)) revert NO_TERMINAL_FOR(PROJECT_ID, token);\n\n        // Perform the `addToBalance`.\n        if (token != JBConstants.NATIVE_TOKEN) {\n            uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n            SafeERC20.forceApprove(IERC20(token), address(terminal), amount);\n\n            terminal.addToBalanceOf(PROJECT_ID, token, amount, false, string(\"\"), bytes(\"\"));\n\n            // Sanity check: make sure we transfer the full amount.\n            assert(IERC20(token).balanceOf(address(this)) == balanceBefore - amount);\n        } else {\n            // If the token is the native token, use `msg.value`.\n            // slither-disable-next-line arbitrary-send-eth\n            terminal.addToBalanceOf{value: amount}(PROJECT_ID, token, amount, false, string(\"\"), bytes(\"\"));\n        }\n    }\n\n    /// @notice Redeems project tokens for terminal tokens.\n    /// @param amount The amount of project tokens to redeem.\n    /// @param token The terminal token to redeem for.\n    /// @param minReceivedTokens The minimum amount of terminal tokens to reclaim. If the amount reclaimed is less than this, the transaction will revert.\n    /// @return receivedAmount The amount of terminal tokens reclaimed by the redemption.\n    function _getBackingAssets(IERC20, uint256 amount, address token, uint256 minReceivedTokens)\n        internal\n        virtual\n        returns (uint256 receivedAmount)\n    {\n        // Get the project's primary terminal for `token`. We will redeem from this terminal.\n        IJBRedeemTerminal terminal = IJBRedeemTerminal(address(DIRECTORY.primaryTerminalOf(PROJECT_ID, token)));\n\n        // If the project doesn't have a primary terminal for `token`, revert.\n        if (address(terminal) == address(0)) {\n            revert TOKEN_NOT_MAPPED(token);\n        }\n\n        // Redeem the tokens.\n        uint256 balanceBefore = _balanceOf(token, address(this));\n        receivedAmount = terminal.redeemTokensOf(\n            address(this), PROJECT_ID, token, amount, minReceivedTokens, payable(address(this)), bytes(\"\")\n        );\n\n        // Sanity check to make sure we received the expected amount.\n        // This prevents malicious terminals from reporting amounts other than what they send.\n        assert(receivedAmount == _balanceOf(token, address(this)) - balanceBefore);\n    }\n\n    /// @notice Builds a hash as they are stored in the merkle tree.\n    /// @param projectTokenAmount The amount of project tokens being redeemed.\n    /// @param terminalTokenAmount The amount of terminal tokens being reclaimed by the redemption.\n    /// @param beneficiary The beneficiary which will receive the project tokens.\n    function _buildTreeHash(uint256 projectTokenAmount, uint256 terminalTokenAmount, address beneficiary)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return keccak256(abi.encode(projectTokenAmount, terminalTokenAmount, beneficiary));\n    }\n\n    /// @notice Helper to get the `addr`'s balance for a given `token`.\n    /// @param token The token to get the balance for.\n    /// @param addr The address to get the `token` balance of.\n    /// @return balance The address' `token` balance.\n    function _balanceOf(address token, address addr) internal view returns (uint256 balance) {\n        if (token == JBConstants.NATIVE_TOKEN) {\n            return addr.balance;\n        }\n\n        return IERC20(token).balanceOf(addr);\n    }\n}\n"
			},
			"src/BPSuckerHook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {ERC165, IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport {IJBPrices} from \"@bananapus/core/src/interfaces/IJBPrices.sol\";\nimport {IJBPayHook, JBAfterPayRecordedContext} from \"@bananapus/core/src/interfaces/IJBPayHook.sol\";\nimport {JBRuleset} from \"@bananapus/core/src/structs/JBRuleset.sol\";\nimport {IJBRulesets} from \"@bananapus/core/src/interfaces/IJBRulesets.sol\";\nimport {JBRulesetMetadataResolver} from \"@bananapus/core/src/libraries/JBRulesetMetadataResolver.sol\";\nimport {IJBRulesetDataHook} from \"@bananapus/core/src/interfaces/IJBRulesetDataHook.sol\";\nimport {JBBeforePayRecordedContext} from \"@bananapus/core/src/structs/JBBeforePayRecordedContext.sol\";\nimport {JBBeforeRedeemRecordedContext} from \"@bananapus/core/src/structs/JBBeforeRedeemRecordedContext.sol\";\nimport {JBPayHookSpecification} from \"@bananapus/core/src/structs/JBPayHookSpecification.sol\";\nimport {JBRedeemHookSpecification} from \"@bananapus/core/src/structs/JBRedeemHookSpecification.sol\";\nimport {IJBRedeemTerminal} from \"@bananapus/core/src/interfaces/terminal/IJBRedeemTerminal.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {mulDiv} from \"@prb/math/src/Common.sol\";\n\nimport \"./BPSucker.sol\";\n\n/// @notice A pay hook which allows the minting of tokens on a remote chain upon payment through a `BPSucker`.\nabstract contract BPSuckerHook is BPSucker, ERC165, IJBRulesetDataHook, IJBPayHook {\n    // A library that parses the packed ruleset metadata into a friendlier format.\n    using JBRulesetMetadataResolver for JBRuleset;\n\n    error NOT_ALLOWED();\n    error INVALID_REMOTE_PROJECT_ID(uint256 expected, uint256 received);\n\n    /// @notice The contract storing and managing project rulesets.\n    IJBRulesets public immutable RULESETS;\n\n    /// @notice The contract that exposes price feeds.\n    IJBPrices public immutable PRICES;\n\n    constructor(IJBPrices prices, IJBRulesets rulesets) {\n        PRICES = prices;\n        RULESETS = rulesets;\n    }\n\n    /// @notice If the project being paid has a remote token set up for the token being paid in, return a weight of zero and this contract as the pay hook.\n    /// @dev This data is provided to the terminal's `pay(...)` function.\n    /// @param context The context passed to this data hook by the `pay(...)` function as a `JBBeforePayRecordedContext`\n    /// struct.\n    /// @return weight The new `weight` to use, overriding the ruleset's `weight`.\n    /// @return hookSpecifications The amount and data to send to a pay hook instead of adding to the terminal's balance.\n    function beforePayRecordedWith(JBBeforePayRecordedContext calldata context)\n        external\n        view\n        returns (uint256 weight, JBPayHookSpecification[] memory hookSpecifications)\n    {\n        // If the payment is not for this hook's project, revert.\n        if (context.projectId != PROJECT_ID) revert INVALID_REMOTE_PROJECT_ID(PROJECT_ID, context.projectId);\n\n        // Get the token being paid in.\n        address token = context.amount.token;\n\n        // If there isn't a remote token for the token being paid in, or if the terminal doesn't support the redeem terminal interface, return the information as-is.\n        if (\n            remoteTokenFor[token].addr == address(0)\n                && !ERC165Checker.supportsInterface(address(context.terminal), type(IJBRedeemTerminal).interfaceId)\n        ) {\n            return (context.weight, new JBPayHookSpecification[](0));\n        }\n\n        // Otherwise, return a weight of zero and this contract as the pay hook (allowing us to mint on the remote chain).\n        hookSpecifications = new JBPayHookSpecification[](1);\n        hookSpecifications[0] = JBPayHookSpecification({hook: IJBPayHook(address(this)), amount: 0, metadata: \"\"});\n\n        return (0, hookSpecifications);\n    }\n\n    function afterPayRecordedWith(JBAfterPayRecordedContext calldata context) external payable {\n        // If the caller is not the project's terminal, revert.\n        if (!DIRECTORY.isTerminalOf(context.projectId, IJBTerminal(msg.sender))) revert NOT_ALLOWED();\n\n        // Get the project's ruleset.\n        JBRuleset memory ruleset = RULESETS.getRulesetOf(context.projectId, context.rulesetId);\n\n        // Calculate the number of project tokens that would be minted by this payment.\n        uint256 weightRatio = context.amount.currency == ruleset.baseCurrency()\n            ? 10 ** context.amount.decimals\n            : PRICES.pricePerUnitOf({\n                projectId: context.projectId,\n                pricingCurrency: context.amount.currency,\n                unitCurrency: ruleset.baseCurrency(),\n                decimals: context.amount.decimals\n            });\n\n        uint256 tokenCount = mulDiv(context.amount.value, context.weight, weightRatio);\n\n        // Get the project's token.\n        IERC20 projectToken = IERC20(address(TOKENS.tokenOf(context.projectId)));\n\n        // Get this contract's project token balance.\n        uint256 projectTokenBalanceBefore = projectToken.balanceOf(address(this));\n\n        // Mint the calculated number of project tokens to this address.\n        uint256 beneficiaryTokenCount = IJBController(address(DIRECTORY.controllerOf(context.projectId))).mintTokensOf({\n            projectId: context.projectId,\n            tokenCount: tokenCount,\n            beneficiary: address(this),\n            memo: \"\",\n            useReservedRate: true\n        });\n\n        // Sanity check: ensure that we received the rhgt number of project tokens.\n        assert(beneficiaryTokenCount == projectToken.balanceOf(address(this)) - projectTokenBalanceBefore);\n\n        // Redeem the project tokens.\n        uint256 reclaimAmount = _getBackingAssets(projectToken, beneficiaryTokenCount, context.amount.token, 0);\n\n        // Add the project tokens and the amount which was redeemed to the outbox tree for the `token`.\n        // These will be bridged by the next call to `BPSucker.toRemote(...)`.\n        _insertIntoTree({\n            projectTokenAmount: beneficiaryTokenCount,\n            token: context.amount.token,\n            terminalTokenAmount: reclaimAmount,\n            beneficiary: context.beneficiary\n        });\n    }\n\n    /// @notice Use the default redemption behavior.\n    function beforeRedeemRecordedWith(JBBeforeRedeemRecordedContext calldata context)\n        external\n        pure\n        returns (uint256, uint256, uint256, JBRedeemHookSpecification[] memory)\n    {\n        return (context.redemptionRate, context.redeemCount, context.totalSupply, new JBRedeemHookSpecification[](0));\n    }\n\n    /// @notice A flag indicating whether an address has permission to mint a project's tokens on-demand. For this contract, this is always false.\n    function hasMintPermissionFor(uint256, address) external pure returns (bool flag) {\n        return false;\n    }\n\n    /// @dev See {IERC165-supportsInterface}.\n    function supportsInterface(bytes4 interfaceId) public view override(IERC165, ERC165) returns (bool) {\n        return interfaceId == type(IJBRulesetDataHook).interfaceId || interfaceId == type(IJBPayHook).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n}\n"
			},
			"src/deployers/BPOptimismSuckerDeployer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {Create2} from \"@openzeppelin/contracts/utils/Create2.sol\";\nimport {JBPermissioned} from \"@bananapus/core/src/abstract/JBPermissioned.sol\";\nimport {IJBPermissions} from \"@bananapus/core/src/interfaces/IJBPermissions.sol\";\nimport {IJBPrices} from \"@bananapus/core/src/interfaces/IJBPrices.sol\";\nimport {IJBDirectory} from \"@bananapus/core/src/interfaces/IJBDirectory.sol\";\nimport {IJBRulesets} from \"@bananapus/core/src/interfaces/IJBRulesets.sol\";\nimport {IJBTokens} from \"@bananapus/core/src/interfaces/IJBTokens.sol\";\nimport {JBPermissionIds} from \"@bananapus/permission-ids/src/JBPermissionIds.sol\";\nimport {IJBPayoutTerminal} from \"@bananapus/core/src/interfaces/terminal/IJBPayoutTerminal.sol\";\n\nimport {OPStandardBridge} from \"../interfaces/OPStandardBridge.sol\";\nimport {OPMessenger} from \"../interfaces/OPMessenger.sol\";\nimport {BPOptimismSucker} from \"../BPOptimismSucker.sol\";\nimport {IBPSucker} from \"./../interfaces/IBPSucker.sol\";\nimport {IBPSuckerDeployerFeeless} from \"./../interfaces/IBPSuckerDeployerFeeless.sol\";\n\n/// @notice An `IBPSuckerDeployerFeeless` implementation to deploy `BPOptimismSucker` contracts.\ncontract BPOptimismSuckerDeployer is JBPermissioned, IBPSuckerDeployerFeeless {\n    error ONLY_SUCKERS();\n    error ALREADY_CONFIGURED();\n\n    /// @notice The contract that exposes price feeds.\n    IJBPrices immutable PRICES;\n\n    /// @notice The contract storing and managing project rulesets.\n    IJBRulesets immutable RULESETS;\n\n    /// @notice The directory of terminals and controllers for projects.\n    IJBDirectory immutable DIRECTORY;\n\n    /// @notice The contract that manages token minting and burning.\n    IJBTokens immutable TOKENS;\n\n    /// @notice Only this address can configure this deployer, can only be used once.\n    address immutable LAYER_SPECIFIC_CONFIGURATOR;\n\n    /// @notice The messenger used to send messages between the local and remote sucker.\n    OPMessenger public MESSENGER;\n\n    /// @notice The bridge used to bridge tokens between the local and remote chain.\n    OPStandardBridge public BRIDGE;\n\n    /// @notice A mapping of suckers deployed by this contract.\n    mapping(address => bool) public isSucker;\n\n    constructor(\n        IJBPrices prices,\n        IJBRulesets rulesets,\n        IJBDirectory directory,\n        IJBTokens tokens,\n        IJBPermissions permissions\n    ) JBPermissioned(permissions) {\n        LAYER_SPECIFIC_CONFIGURATOR = msg.sender;\n\n        PRICES = prices;\n        RULESETS = rulesets;\n        DIRECTORY = directory;\n        TOKENS = tokens;\n    }\n\n    /// @notice Create a new `BPSucker` for a specific project.\n    /// @dev Uses the sender address as the salt, which means the same sender must call this function on both chains.\n    /// @param localProjectId The project's ID on the local chain.\n    /// @param salt The salt to use for the `create2` address.\n    /// @return sucker The address of the new sucker.\n    function createForSender(uint256 localProjectId, bytes32 salt) external returns (IBPSucker sucker) {\n        salt = keccak256(abi.encodePacked(msg.sender, salt));\n        sucker = IBPSucker(\n            address(\n                new BPOptimismSucker{salt: salt}(\n                    PRICES, RULESETS, DIRECTORY, TOKENS, PERMISSIONS, address(0), localProjectId\n                )\n            )\n        );\n        isSucker[address(sucker)] = true;\n    }\n\n    /// @notice Use a project's surplus allowance without paying exit fees.\n    /// @dev This function can only be called by suckers deployed by this contract.\n    /// @dev This function can only be called by suckers with `JBPermissionIds.USE_ALLOWANCE` permission from the project's owner.\n    /// @dev This function is not necessarily feeless, as it still requires JuiceboxDAO to set the address as feeless.\n    /// @param projectId The project's ID.\n    /// @param terminal The terminal to use the surplus allowance from.\n    /// @param token The token that the surplus is in.\n    /// @param currency The currency that the `amount` is denominated in.\n    /// @param amount The amount to use from the terminal, denominated in the `currency`.\n    /// @param minReceivedTokens The minimum amount of terminal tokens to receive. If the terminal returns less than this amount, the transaction will revert.\n    /// @return The amount of tokens received.\n    function useAllowanceFeeless(\n        uint256 projectId,\n        IJBPayoutTerminal terminal,\n        address token,\n        uint32 currency,\n        uint256 amount,\n        uint256 minReceivedTokens\n    ) external returns (uint256) {\n        // Make sure the caller is a sucker.\n        if (!isSucker[msg.sender]) {\n            revert ONLY_SUCKERS();\n        }\n\n        // Access control: only suckers with `JBPermissionIds.USE_ALLOWANCE` permission from the project's owner can use the allowance.\n        _requirePermissionFrom(DIRECTORY.PROJECTS().ownerOf(projectId), projectId, JBPermissionIds.USE_ALLOWANCE);\n\n        // Use the allowance.\n        return terminal.useAllowanceOf(\n            projectId, token, amount, currency, minReceivedTokens, payable(address(msg.sender)), string(\"\")\n        );\n    }\n\n\n    function configureLayerSpecific(OPMessenger messenger, OPStandardBridge bridge) external {\n        if(address(MESSENGER) != address(0) || address(BRIDGE) != address(0))\n            revert ALREADY_CONFIGURED();\n        \n        // Configure these layer specific properties.\n        // This is done in a seperate call to make the deployment code chain agnostic.\n        MESSENGER = messenger;\n        BRIDGE = bridge;\n    }\n}\n"
			},
			"src/enums/BPAddToBalanceMode.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice Options for how a `BPSucker`'s `amountToAddToBalance` gets added to its project's balance.\n/// @custom:element MANUAL The amount gets added to the project's balance manually by calling `addOutstandingAmountToBalance`.\n/// @custom:element ON_CLAIM The amount gets added to the project's balance automatically when `claim` is called.\nenum BPAddToBalanceMode {\n    MANUAL,\n    ON_CLAIM\n}\n"
			},
			"src/interfaces/IBPSucker.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {BPTokenMapping} from \"../structs/BPTokenMapping.sol\";\n\ninterface IBPSucker {\n    function isMapped(address token) external view returns (bool);\n\n    function prepare(uint256 projectTokenAmount, address beneficiary, uint256 minTokensReclaimed, address token)\n        external;\n\n    function mapToken(BPTokenMapping calldata map) external;\n\n    function mapTokens(BPTokenMapping[] calldata maps) external;\n\n    event NewInboxTreeRoot(address indexed token, uint64 nonce, bytes32 root);\n\n    event RootToRemote(bytes32 indexed root, address indexed terminalToken, uint256 index, uint64 nonce);\n\n    event InsertToOutboxTree(\n        address indexed beneficiary,\n        address indexed terminalToken,\n        bytes32 hashed,\n        uint256 index,\n        bytes32 root,\n        uint256 projectTokenAmount,\n        uint256 terminalTokenAmount\n    );\n}\n"
			},
			"src/interfaces/IBPSuckerDeployer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IBPSucker} from \"./IBPSucker.sol\";\n\ninterface IBPSuckerDeployer {\n    function createForSender(uint256 localProjectId, bytes32 salt) external returns (IBPSucker sucker);\n}\n"
			},
			"src/interfaces/IBPSuckerDeployerFeeless.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IBPSuckerDeployer} from \"./IBPSuckerDeployer.sol\";\nimport {IJBPayoutTerminal} from \"@bananapus/core/src/interfaces/terminal/IJBPayoutTerminal.sol\";\n\ninterface IBPSuckerDeployerFeeless is IBPSuckerDeployer {\n    function useAllowanceFeeless(\n        uint256 projectId,\n        IJBPayoutTerminal terminal,\n        address token,\n        uint32 currency,\n        uint256 amount,\n        uint256 minReceivedTokens\n    ) external returns (uint256);\n}\n"
			},
			"src/interfaces/OPMessenger.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OPMessenger {\n    function xDomainMessageSender() external returns (address);\n\n    function sendMessage(address _target, bytes memory _message, uint32 _gasLimit) external payable;\n\n    function bridgeERC20To(\n        address localToken,\n        address remoteToken,\n        address to,\n        uint256 amount,\n        uint32 minGasLimit,\n        bytes calldata extraData\n    ) external;\n}\n"
			},
			"src/interfaces/OPStandardBridge.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OPStandardBridge {\n    /**\n     * @notice Sends ERC20 tokens to a receiver's address on the other chain. Note that if the\n     *         ERC20 token on the other chain does not recognize the local token as the correct\n     *         pair token, the ERC20 bridge will fail and the tokens will be returned to sender on\n     *         this chain.\n     *\n     * @param localToken  Address of the ERC20 on this chain.\n     * @param remoteToken Address of the corresponding token on the remote chain.\n     * @param to          Address of the receiver.\n     * @param amount      Amount of local tokens to deposit.\n     * @param minGasLimit Minimum amount of gas that the bridge can be relayed with.\n     * @param extraData   Extra data to be sent with the transaction. Note that the recipient will\n     *                     not be triggered with this data, but it will be emitted and can be used\n     *                     to identify the transaction.\n     */\n    function bridgeERC20To(\n        address localToken,\n        address remoteToken,\n        address to,\n        uint256 amount,\n        uint32 minGasLimit,\n        bytes calldata extraData\n    ) external;\n}\n"
			},
			"src/structs/BPClaim.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {BPLeaf} from \"./BPLeaf.sol\";\n\nstruct BPClaim {\n    address token;\n    BPLeaf leaf;\n    // Must be `BPSucker.TREE_DEPTH` long.\n    bytes32[32] proof;\n}\n"
			},
			"src/structs/BPInboxTreeRoot.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The root of an inbox tree for a given token in a `BPSucker`.\n/// @dev Inbox trees are used to receive from the remote chain to the local chain. Tokens can be `claim`ed from the inbox tree.\n/// @custom:member nonce Tracks the nonce of the tree. The nonce cannot decrease.\n/// @custom:member root The root of the tree.\nstruct BPInboxTreeRoot {\n    uint64 nonce;\n    bytes32 root;\n}\n"
			},
			"src/structs/BPLeaf.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice A leaf in the inbox or outbox tree of a `BPSucker`. Used to `claim` tokens from the inbox tree.\nstruct BPLeaf {\n    uint256 index;\n    address beneficiary;\n    uint256 projectTokenAmount;\n    uint256 terminalTokenAmount;\n}\n"
			},
			"src/structs/BPMessageRoot.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {BPInboxTreeRoot} from \"./BPInboxTreeRoot.sol\";\n\n/// @notice Information about the remote (inbox) tree's root, passed in a message from the remote chain.\n/// @custom:member The address of the terminal token that the tree tracks.\n/// @custom:member The amount of tokens being sent.\n/// @custom:member The root of the merkle tree.\nstruct BPMessageRoot {\n    address token;\n    uint256 amount;\n    BPInboxTreeRoot remoteRoot;\n}\n"
			},
			"src/structs/BPOutboxTree.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {MerkleLib} from \"../utils/MerkleLib.sol\";\n\n/// @notice A merkle tree used to track the outbox for a given token in a `BPSucker`.\n/// @dev The outbox is used to send from the local chain to the remote chain.\nstruct BPOutboxTree {\n    uint64 nonce;\n    uint256 balance;\n    MerkleLib.Tree tree;\n}\n"
			},
			"src/structs/BPRemoteToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice A struct that represents a token on the remote chain.\n/// @custom:member minGas The minimum gas to use when bridging.\n/// @custom:member addr The address of the token on the remote chain.\n/// @custom:member minBridgeAmount The minimum amount to bridge.\nstruct BPRemoteToken {\n    uint32 minGas;\n    address addr;\n    uint256 minBridgeAmount;\n}\n"
			},
			"src/structs/BPTokenMapping.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct BPTokenMapping {\n    address localToken;\n    uint32 minGas;\n    address remoteToken;\n    uint256 minBridgeAmount;\n}\n"
			},
			"src/utils/MerkleLib.sol": {
				"content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.23;\n\n/**\n * @title MerkleLib\n * @author Illusory Systems Inc.\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\n *\n */\nlibrary MerkleLib {\n    // ========== Custom Errors ===========\n\n    error MerkleLib__insert_treeIsFull();\n\n    // ============ Constants =============\n\n    uint256 internal constant TREE_DEPTH = 32;\n    uint256 internal constant MAX_LEAVES = 2 ** TREE_DEPTH - 1;\n\n    /**\n     * @dev Z_i represent the hash values at different heights for a binary tree with leaf values equal to `0`.\n     * (e.g. Z_1 is the keccak256 hash of (0x0, 0x0), Z_2 is the keccak256 hash of (Z_1, Z_1), etc...)\n     * Z_0 is the bottom of the 33-layer tree, Z_32 is the top (i.e. root).\n     * Used to shortcut calculation in root calculation methods below.\n     */\n    bytes32 internal constant Z_0 = hex\"0000000000000000000000000000000000000000000000000000000000000000\";\n    bytes32 internal constant Z_1 = hex\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\";\n    bytes32 internal constant Z_2 = hex\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\";\n    bytes32 internal constant Z_3 = hex\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\";\n    bytes32 internal constant Z_4 = hex\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\";\n    bytes32 internal constant Z_5 = hex\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\";\n    bytes32 internal constant Z_6 = hex\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\";\n    bytes32 internal constant Z_7 = hex\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\";\n    bytes32 internal constant Z_8 = hex\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\";\n    bytes32 internal constant Z_9 = hex\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\";\n    bytes32 internal constant Z_10 = hex\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\";\n    bytes32 internal constant Z_11 = hex\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\";\n    bytes32 internal constant Z_12 = hex\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\";\n    bytes32 internal constant Z_13 = hex\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\";\n    bytes32 internal constant Z_14 = hex\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\";\n    bytes32 internal constant Z_15 = hex\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\";\n    bytes32 internal constant Z_16 = hex\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\";\n    bytes32 internal constant Z_17 = hex\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\";\n    bytes32 internal constant Z_18 = hex\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\";\n    bytes32 internal constant Z_19 = hex\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\";\n    bytes32 internal constant Z_20 = hex\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\";\n    bytes32 internal constant Z_21 = hex\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\";\n    bytes32 internal constant Z_22 = hex\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\";\n    bytes32 internal constant Z_23 = hex\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\";\n    bytes32 internal constant Z_24 = hex\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\";\n    bytes32 internal constant Z_25 = hex\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\";\n    bytes32 internal constant Z_26 = hex\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\";\n    bytes32 internal constant Z_27 = hex\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\";\n    bytes32 internal constant Z_28 = hex\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\";\n    bytes32 internal constant Z_29 = hex\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\";\n    bytes32 internal constant Z_30 = hex\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\";\n    bytes32 internal constant Z_31 = hex\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\";\n    bytes32 internal constant Z_32 = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n    // ============= Structs ==============\n\n    /**\n     * @notice Struct representing incremental merkle tree. Contains current\n     * branch and the number of inserted leaves in the tree.\n     *\n     */\n    struct Tree {\n        bytes32[TREE_DEPTH] branch;\n        uint256 count;\n    }\n\n    // ========= Write Methods =========\n\n    /**\n     * @notice Inserts a given node (leaf) into merkle tree. Operates on an in-memory tree and\n     * returns an updated version of that tree.\n     * @dev Reverts if the tree is already full.\n     * @param node Element to insert into tree.\n     * @return Tree Updated tree.\n     *\n     */\n    function insert(Tree memory tree, bytes32 node) internal pure returns (Tree memory) {\n        // Update tree.count to increase the current count by 1 since we'll be including a new node.\n        uint256 size = ++tree.count;\n        if (size > MAX_LEAVES) revert MerkleLib__insert_treeIsFull();\n\n        // Loop starting at 0, ending when we've finished inserting the node (i.e. hashing it) into\n        // the active branch. Each loop we cut size in half, hashing the inserted node up the active\n        // branch along the way.\n        for (uint256 i; i < TREE_DEPTH;) {\n            // Check if the current size is odd; if so, we set this index in the branch to be the node.\n            if ((size & 1) == 1) {\n                // If i > 0, then this node will be a hash of the original node with every layer up\n                // until layer `i`.\n                tree.branch[i] = node;\n                return tree;\n            }\n            // If the size is not yet odd, we hash the current index in the tree branch with the node.\n            node = keccak256(abi.encodePacked(tree.branch[i], node));\n            size >>= 1; // Cut size in half (statement equivalent to: `size /= 2`).\n\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement, this code should\n        // be unreachable. We revert here just to be safe.\n        revert MerkleLib__insert_treeIsFull();\n    }\n\n    // ========= Read Methods =========\n\n    /**\n     * @notice Calculates and returns tree's current root.\n     * @return _current bytes32 root.\n     *\n     */\n    function root(Tree storage tree) internal view returns (bytes32 _current) {\n        uint256 _index = tree.count;\n\n        if (_index == 0) {\n            return Z_32;\n        }\n\n        uint256 i;\n        assembly {\n            let TREE_SLOT := tree.slot\n\n            for {} true {} {\n                for {} true {} {\n                    if and(_index, 1) {\n                        mstore(0, sload(TREE_SLOT))\n                        mstore(0x20, Z_0)\n                        _current := keccak256(0, 0x40)\n                        break\n                    }\n\n                    if and(_index, shl(1, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 1)))\n                        mstore(0x20, Z_1)\n                        _current := keccak256(0, 0x40)\n                        i := 1\n                        break\n                    }\n\n                    if and(_index, shl(2, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 2)))\n                        mstore(0x20, Z_2)\n                        _current := keccak256(0, 0x40)\n                        i := 2\n                        break\n                    }\n\n                    if and(_index, shl(3, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 3)))\n                        mstore(0x20, Z_3)\n                        _current := keccak256(0, 0x40)\n                        i := 3\n                        break\n                    }\n\n                    if and(_index, shl(4, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 4)))\n                        mstore(0x20, Z_4)\n                        _current := keccak256(0, 0x40)\n                        i := 4\n                        break\n                    }\n\n                    if and(_index, shl(5, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 5)))\n                        mstore(0x20, Z_5)\n                        _current := keccak256(0, 0x40)\n                        i := 5\n                        break\n                    }\n\n                    if and(_index, shl(6, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 6)))\n                        mstore(0x20, Z_6)\n                        _current := keccak256(0, 0x40)\n                        i := 6\n                        break\n                    }\n\n                    if and(_index, shl(7, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 7)))\n                        mstore(0x20, Z_7)\n                        _current := keccak256(0, 0x40)\n                        i := 7\n                        break\n                    }\n\n                    if and(_index, shl(8, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 8)))\n                        mstore(0x20, Z_8)\n                        _current := keccak256(0, 0x40)\n                        i := 8\n                        break\n                    }\n\n                    if and(_index, shl(9, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 9)))\n                        mstore(0x20, Z_9)\n                        _current := keccak256(0, 0x40)\n                        i := 9\n                        break\n                    }\n\n                    if and(_index, shl(10, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 10)))\n                        mstore(0x20, Z_10)\n                        _current := keccak256(0, 0x40)\n                        i := 10\n                        break\n                    }\n\n                    if and(_index, shl(11, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 11)))\n                        mstore(0x20, Z_11)\n                        _current := keccak256(0, 0x40)\n                        i := 11\n                        break\n                    }\n\n                    if and(_index, shl(12, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 12)))\n                        mstore(0x20, Z_12)\n                        _current := keccak256(0, 0x40)\n                        i := 12\n                        break\n                    }\n\n                    if and(_index, shl(13, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 13)))\n                        mstore(0x20, Z_13)\n                        _current := keccak256(0, 0x40)\n                        i := 13\n                        break\n                    }\n\n                    if and(_index, shl(14, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 14)))\n                        mstore(0x20, Z_14)\n                        _current := keccak256(0, 0x40)\n                        i := 14\n                        break\n                    }\n\n                    if and(_index, shl(15, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 15)))\n                        mstore(0x20, Z_15)\n                        _current := keccak256(0, 0x40)\n                        i := 15\n                        break\n                    }\n\n                    if and(_index, shl(16, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 16)))\n                        mstore(0x20, Z_16)\n                        _current := keccak256(0, 0x40)\n                        i := 16\n                        break\n                    }\n\n                    if and(_index, shl(17, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 17)))\n                        mstore(0x20, Z_17)\n                        _current := keccak256(0, 0x40)\n                        i := 17\n                        break\n                    }\n\n                    if and(_index, shl(18, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 18)))\n                        mstore(0x20, Z_18)\n                        _current := keccak256(0, 0x40)\n                        i := 18\n                        break\n                    }\n\n                    if and(_index, shl(19, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 19)))\n                        mstore(0x20, Z_19)\n                        _current := keccak256(0, 0x40)\n                        i := 19\n                        break\n                    }\n\n                    if and(_index, shl(20, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 20)))\n                        mstore(0x20, Z_20)\n                        _current := keccak256(0, 0x40)\n                        i := 20\n                        break\n                    }\n\n                    if and(_index, shl(21, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 21)))\n                        mstore(0x20, Z_21)\n                        _current := keccak256(0, 0x40)\n                        i := 21\n                        break\n                    }\n\n                    if and(_index, shl(22, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 22)))\n                        mstore(0x20, Z_22)\n                        _current := keccak256(0, 0x40)\n                        i := 22\n                        break\n                    }\n\n                    if and(_index, shl(23, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 23)))\n                        mstore(0x20, Z_23)\n                        _current := keccak256(0, 0x40)\n                        i := 23\n                        break\n                    }\n\n                    if and(_index, shl(24, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 24)))\n                        mstore(0x20, Z_24)\n                        _current := keccak256(0, 0x40)\n                        i := 24\n                        break\n                    }\n\n                    if and(_index, shl(25, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 25)))\n                        mstore(0x20, Z_25)\n                        _current := keccak256(0, 0x40)\n                        i := 25\n                        break\n                    }\n\n                    if and(_index, shl(26, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 26)))\n                        mstore(0x20, Z_26)\n                        _current := keccak256(0, 0x40)\n                        i := 26\n                        break\n                    }\n\n                    if and(_index, shl(27, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 27)))\n                        mstore(0x20, Z_27)\n                        _current := keccak256(0, 0x40)\n                        i := 27\n                        break\n                    }\n\n                    if and(_index, shl(28, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 28)))\n                        mstore(0x20, Z_28)\n                        _current := keccak256(0, 0x40)\n                        i := 28\n                        break\n                    }\n\n                    if and(_index, shl(29, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 29)))\n                        mstore(0x20, Z_29)\n                        _current := keccak256(0, 0x40)\n                        i := 29\n                        break\n                    }\n\n                    if and(_index, shl(30, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 30)))\n                        mstore(0x20, Z_30)\n                        _current := keccak256(0, 0x40)\n                        i := 30\n                        break\n                    }\n\n                    if and(_index, shl(31, 1)) {\n                        mstore(0, sload(add(TREE_SLOT, 31)))\n                        mstore(0x20, Z_31)\n                        _current := keccak256(0, 0x40)\n                        i := 31\n                        break\n                    }\n\n                    _current := Z_32\n                    i := 32\n                    break\n                }\n\n                if gt(i, 30) { break }\n\n                {\n                    if lt(i, 1) {\n                        switch and(_index, shl(1, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_1)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 1)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 2) {\n                        switch and(_index, shl(2, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_2)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 2)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 3) {\n                        switch and(_index, shl(3, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_3)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 3)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 4) {\n                        switch and(_index, shl(4, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_4)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 4)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 5) {\n                        switch and(_index, shl(5, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_5)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 5)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 6) {\n                        switch and(_index, shl(6, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_6)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 6)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 7) {\n                        switch and(_index, shl(7, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_7)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 7)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 8) {\n                        switch and(_index, shl(8, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_8)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 8)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 9) {\n                        switch and(_index, shl(9, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_9)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 9)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 10) {\n                        switch and(_index, shl(10, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_10)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 10)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 11) {\n                        switch and(_index, shl(11, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_11)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 11)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 12) {\n                        switch and(_index, shl(12, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_12)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 12)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 13) {\n                        switch and(_index, shl(13, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_13)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 13)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 14) {\n                        switch and(_index, shl(14, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_14)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 14)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 15) {\n                        switch and(_index, shl(15, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_15)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 15)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 16) {\n                        switch and(_index, shl(16, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_16)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 16)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 17) {\n                        switch and(_index, shl(17, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_17)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 17)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 18) {\n                        switch and(_index, shl(18, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_18)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 18)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 19) {\n                        switch and(_index, shl(19, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_19)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 19)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 20) {\n                        switch and(_index, shl(20, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_20)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 20)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 21) {\n                        switch and(_index, shl(21, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_21)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 21)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 22) {\n                        switch and(_index, shl(22, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_22)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 22)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 23) {\n                        switch and(_index, shl(23, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_23)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 23)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 24) {\n                        switch and(_index, shl(24, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_24)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 24)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 25) {\n                        switch and(_index, shl(25, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_25)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 25)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 26) {\n                        switch and(_index, shl(26, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_26)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 26)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 27) {\n                        switch and(_index, shl(27, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_27)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 27)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 28) {\n                        switch and(_index, shl(28, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_28)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 28)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 29) {\n                        switch and(_index, shl(29, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_29)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 29)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 30) {\n                        switch and(_index, shl(30, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_30)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 30)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n\n                    if lt(i, 31) {\n                        switch and(_index, shl(31, 1))\n                        case 0 {\n                            mstore(0, _current)\n                            mstore(0x20, Z_31)\n                        }\n                        default {\n                            mstore(0, sload(add(TREE_SLOT, 31)))\n                            mstore(0x20, _current)\n                        }\n\n                        _current := keccak256(0, 0x40)\n                    }\n                }\n\n                break\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates and returns the merkle root for the given leaf `_item`,\n     * a merkle branch, and the index of `_item` in the tree.\n     * @param _item Merkle leaf\n     * @param _branch Merkle proof\n     * @param _index Index of `_item` in tree\n     * @return _current Calculated merkle root\n     *\n     */\n    function branchRoot(bytes32 _item, bytes32[TREE_DEPTH] memory _branch, uint256 _index)\n        internal\n        pure\n        returns (bytes32 _current)\n    {\n        assembly {\n            _current := _item\n            let BRANCH_DATA_OFFSET := _branch\n            let f\n\n            f := shl(5, and(_index, 1))\n            mstore(f, _current)\n            mstore(sub(0x20, f), mload(BRANCH_DATA_OFFSET))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(1, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 1))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(2, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 2))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(3, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 3))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(4, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 4))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(5, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 5))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(6, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 6))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(7, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 7))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(8, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 8))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(9, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 9))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(10, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 10))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(11, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 11))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(12, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 12))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(13, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 13))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(14, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 14))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(15, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 15))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(16, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 16))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(17, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 17))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(18, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 18))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(19, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 19))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(20, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 20))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(21, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 21))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(22, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 22))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(23, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 23))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(24, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 24))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(25, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 25))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(26, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 26))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(27, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 27))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(28, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 28))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(29, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 29))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(30, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 30))))\n            _current := keccak256(0, 0x40)\n\n            f := shl(5, iszero(and(_index, shl(31, 1))))\n            mstore(sub(0x20, f), _current)\n            mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 31))))\n            _current := keccak256(0, 0x40)\n        }\n    }\n}\n"
			}
		}
	}
}